(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}overWriteTasks(e){this.tasks=e}}class t{constructor(e,t){this.name=e,this.date=t,this.done=!1}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const n=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class r{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}}const a=()=>{document.querySelector("#project-modal").style.display="none"},o=()=>{document.querySelector("#task-modal").style.display="none"};Math.pow(10,8);var c=36e5;function l(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function s(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function i(e,t){l(1,arguments);var n=t||{},r=null==n.additionalDigits?2:s(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,o=f(e);if(o.date){var c=g(o.date,r);a=h(c.restDateString,c.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var i,d=a.getTime(),u=0;if(o.time&&(u=y(o.time),isNaN(u)))return new Date(NaN);if(!o.timezone){var m=new Date(d+u),p=new Date(0);return p.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),p.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),p}return i=N(o.timezone),isNaN(i)?new Date(NaN):new Date(d+u+i)}var d={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},u=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,m=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,p=/^([+-])(\d{2})(?::?(\d{2}))?$/;function f(e){var t,n={},r=e.split(d.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],d.timeZoneDelimiter.test(n.date)&&(n.date=e.split(d.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=d.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function g(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function h(e,t){if(null===t)return new Date(NaN);var n=e.match(u);if(!n)return new Date(NaN);var r=!!n[4],a=v(n[1]),o=v(n[2])-1,c=v(n[3]),l=v(n[4]),s=v(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,l,s)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,l,s):new Date(NaN);var i=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(S[t]||(k(e)?29:28))}(t,o,c)&&function(e,t){return t>=1&&t<=(k(e)?366:365)}(t,a)?(i.setUTCFullYear(t,o,Math.max(a,c)),i):new Date(NaN)}function v(e){return e?parseInt(e):1}function y(e){var t=e.match(m);if(!t)return NaN;var n=D(t[1]),r=D(t[2]),a=D(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*c+6e4*r+1e3*a:NaN}function D(e){return e&&parseFloat(e.replace(",","."))||0}function N(e){if("Z"===e)return 0;var t=e.match(p);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*c+6e4*a):NaN}var S=[31,null,31,30,31,30,31,31,30,31,30,31];function k(e){return e%400==0||e%4==0&&e%100!=0}function w(e){l(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function C(e,t){l(2,arguments);var n=w(e),r=w(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function q(e,t){l(2,arguments);var n=w(e),r=s(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}function E(e,t){l(2,arguments);var n=w(e),r=s(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),o=new Date(n.getTime());o.setMonth(n.getMonth()+r+1,0);var c=o.getDate();return a>=c?o:(n.setFullYear(o.getFullYear(),o.getMonth(),a),n)}const j=(e,t)=>{let n=document.createElement("li"),r=document.createElement("div");r.classList.add("color-block"),r.style.backgroundColor=t;let a=document.createElement("div");a.classList.add("task-container");let o=document.createElement("div");o.classList.add("task-and-checkbox");let c=document.createElement("div");c.classList.add("checkbox"),!0===e.done&&c.classList.add("checked");let l=document.createElement("div");l.classList.add("task-name"),l.textContent=e.name;let s=document.createElement("div");s.classList.add("date-and-edit");let i=document.createElement("date");i.classList.add("date"),""===e.date?i.textContent="No due date":i.textContent=e.date;let d=document.createElement("span"),u=document.createElement("img");u.src="./img/credit-card-edit.png";let m=document.createElement("span"),p=document.createElement("img");p.src="./img/delete.png",n.appendChild(r),n.appendChild(a),a.appendChild(o),o.appendChild(c),o.appendChild(l),a.appendChild(s),s.appendChild(i),d.appendChild(u),m.appendChild(p),s.appendChild(d),s.appendChild(m),document.querySelector(".bot-content-block ul").appendChild(n)};document.querySelector("#task-modal-close").addEventListener("click",(()=>{o()})),document.querySelector(".add-task").addEventListener("click",(()=>{document.querySelector("#task-form").reset(),n(),(()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)})(),(()=>{let e=document.querySelector("#project");if(null!==r.getData()){let t=r.getData();for(const n of t){let t=document.createElement("option");t.value=n.name,t.text=n.name,e.appendChild(t)}}})(),document.querySelector("#task-modal").style.display="block"})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{a()})),document.querySelector(".add-project").addEventListener("click",(()=>{document.querySelector("#project-form").reset(),n(),document.querySelector("#project-modal").style.display="block"})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?o():event.target==document.querySelector("#project-modal")&&a()})),document.querySelector("#project-form-submit").addEventListener("click",(t=>{t.preventDefault(),(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),n=!0;return""===e?(t.textContent="Please enter a name for the project.",n=!1):(t.textContent="",n=!0),!!n})()&&((()=>{let t=(()=>{let t=document.querySelector("#name").value,n=document.querySelector("#color").value;return new e(t,n)})();if(null===r.getData()){let e=[];e.push(t),r.saveData(e)}else{let e=r.getData();e.push(t),r.saveData(e)}})(),a())})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let n=document.querySelector("#task-error"),r=document.querySelector("#project-error"),a=!0,o=!0;return""===e?(n.textContent="Please enter a task name.",o=!1):(n.textContent="",o=!0),""===t&&null===document.querySelector("#project").firstChild?(r.textContent="Please create a project before adding a task.",a=!1):(r.textContent="",a=!0),!(!a||!o)})()&&((()=>{let e=(()=>{let e=document.querySelector("#task").value,n=document.querySelector("#dueDate").value;return new t(e,n)})(),n=document.querySelector("#project").value,a=r.getData();a.forEach((t=>{t.name===n&&t.tasks.push(e)})),r.saveData(a)})(),o())})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),o()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),a()})),(()=>{let e=i((new Date).toISOString().split("T")[0]);r.getData().forEach((t=>{let n=t.color;t.tasks.forEach((t=>{0===C(i(t.date),e)&&j(t,n)}))}))})(),(()=>{let e=function(e,t){if(l(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n=t.years?s(t.years):0,r=t.months?s(t.months):0,a=t.weeks?s(t.weeks):0,o=t.days?s(t.days):0,c=t.hours?s(t.hours):0,i=t.minutes?s(t.minutes):0,d=t.seconds?s(t.seconds):0,u=w(e),m=r||n?E(u,r+12*n):u,p=o||a?q(m,o+7*a):m,f=1e3*(d+60*(i+60*c));return new Date(p.getTime()+f)}(i((new Date).toISOString().split("T")[0]),{days:7});console.log(e),r.getData().forEach((t=>{let n=t.color;t.tasks.forEach((t=>{-1===C(i(t.date),e)&&j(t,n)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,