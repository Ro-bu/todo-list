(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}overWriteTasks(e){this.tasks=e}}class t{constructor(e,t){this.name=e,this.date=t,this.done=!1}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const n=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class r{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}}Math.pow(10,8);var a=36e5;function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function l(e,t){o(1,arguments);var n=t||{},r=null==n.additionalDigits?2:c(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,l=m(e);if(l.date){var d=p(l.date,r);a=h(d.restDateString,d.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var i,s=a.getTime(),u=0;if(l.time&&(u=g(l.time),isNaN(u)))return new Date(NaN);if(!l.timezone){var f=new Date(s+u),v=new Date(0);return v.setFullYear(f.getUTCFullYear(),f.getUTCMonth(),f.getUTCDate()),v.setHours(f.getUTCHours(),f.getUTCMinutes(),f.getUTCSeconds(),f.getUTCMilliseconds()),v}return i=y(l.timezone),isNaN(i)?new Date(NaN):new Date(s+u+i)}var d={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},i=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,s=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,u=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(e){var t,n={},r=e.split(d.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],d.timeZoneDelimiter.test(n.date)&&(n.date=e.split(d.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=d.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function p(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function h(e,t){if(null===t)return new Date(NaN);var n=e.match(i);if(!n)return new Date(NaN);var r=!!n[4],a=f(n[1]),o=f(n[2])-1,c=f(n[3]),l=f(n[4]),d=f(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,l,d)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,l,d):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(D[t]||(S(e)?29:28))}(t,o,c)&&function(e,t){return t>=1&&t<=(S(e)?366:365)}(t,a)?(s.setUTCFullYear(t,o,Math.max(a,c)),s):new Date(NaN)}function f(e){return e?parseInt(e):1}function g(e){var t=e.match(s);if(!t)return NaN;var n=v(t[1]),r=v(t[2]),o=v(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*a+6e4*r+1e3*o:NaN}function v(e){return e&&parseFloat(e.replace(",","."))||0}function y(e){if("Z"===e)return 0;var t=e.match(u);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*a+6e4*o):NaN}var D=[31,null,31,30,31,30,31,31,30,31,30,31];function S(e){return e%400==0||e%4==0&&e%100!=0}function k(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function C(e,t){o(2,arguments);var n=k(e),r=k(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function N(e,t){o(2,arguments);var n=k(e),r=c(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}function E(e,t){o(2,arguments);var n=k(e),r=c(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),l=new Date(n.getTime());l.setMonth(n.getMonth()+r+1,0);var d=l.getDate();return a>=d?l:(n.setFullYear(l.getFullYear(),l.getMonth(),a),n)}const q=()=>{null!==r.getData()&&r.getData().forEach((e=>{(e=>{let t=document.createElement("li");t.dataset.project=e.name;let n=document.createElement("span"),r=document.createElement("span"),a=document.createElement("div");r.textContent="(0)",n.textContent=e.name,a.style.backgroundColor=e.color,t.appendChild(a),t.appendChild(n),t.appendChild(r),document.querySelector(".project-container ul").appendChild(t)})(e)}))},w=(e,t,n,r)=>{let a=document.createElement("li");a.dataset.projectIndex=n,a.dataset.taskIndex=r;let o=document.createElement("div");o.classList.add("color-block"),o.style.backgroundColor=t;let c=document.createElement("div");c.classList.add("task-container");let l=document.createElement("div");l.classList.add("task-and-checkbox");let d=document.createElement("div");d.classList.add("checkbox"),!0===e.done&&d.classList.add("checked");let i=document.createElement("div");i.classList.add("task-name"),i.textContent=e.name;let s=document.createElement("div");s.classList.add("date-and-edit");let u=document.createElement("date");u.classList.add("date"),""===e.date?u.textContent="No due date":u.textContent=e.date;let m=document.createElement("span"),p=document.createElement("img");p.src="./img/credit-card-edit.png";let h=document.createElement("span"),f=document.createElement("img");f.src="./img/delete.png",a.appendChild(o),a.appendChild(c),c.appendChild(l),l.appendChild(d),l.appendChild(i),c.appendChild(s),s.appendChild(u),m.appendChild(p),h.appendChild(f),s.appendChild(m),s.appendChild(h),document.querySelector(".bot-content-block ul").appendChild(a)},j=()=>{let e=l((new Date).toISOString().split("T")[0]),t=r.getData(),n=0;t.forEach((t=>{let r=t.color,a=0;t.tasks.forEach((t=>{0===C(l(t.date),e)&&w(t,r,n,a),a++})),n++}))},b=()=>{let e=l((new Date).toISOString().split("T")[0]),t=function(e,t){if(o(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n=t.years?c(t.years):0,r=t.months?c(t.months):0,a=t.weeks?c(t.weeks):0,l=t.days?c(t.days):0,d=t.hours?c(t.hours):0,i=t.minutes?c(t.minutes):0,s=t.seconds?c(t.seconds):0,u=k(e),m=r||n?E(u,r+12*n):u,p=l||a?N(m,l+7*a):m,h=1e3*(s+60*(i+60*d));return new Date(p.getTime()+h)}(e,{days:7}),n=r.getData(),a=0;n.forEach((n=>{let r=n.color,o=0;n.tasks.forEach((n=>{-1===C(l(n.date),t)&&-1!==C(l(n.date),e)&&w(n,r,a,o),o++})),a++}))},L=()=>{let e=document.querySelector(".bot-content-block ul");for(;e.firstChild;)e.removeChild(e.lastChild)},T=()=>{let e=document.querySelector(".list-name");document.querySelectorAll(".project-container ul li").forEach((t=>{t.addEventListener("click",(t=>{L(),e.textContent=String(t.target.closest("li").dataset.project),(e=>{if(null!==r.getData()){let t=r.getData(),n=0;t.forEach((t=>{let r=0;if(t.name===e){let e=t.color;t.tasks.forEach((t=>{w(t,e,n,r),r++}))}n++}))}})(t.target.closest("li").dataset.project)}))}))},x=()=>{document.querySelector("#project-modal").style.display="none"},I=()=>{document.querySelector("#task-modal").style.display="none"};document.querySelector("#task-modal-close").addEventListener("click",(()=>{I()})),document.querySelector(".add-task").addEventListener("click",(()=>{document.querySelector("#task-form").reset(),n(),(()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)})(),(()=>{let e=document.querySelector("#project");if(null!==r.getData()){let t=r.getData();for(const n of t){let t=document.createElement("option");t.value=n.name,t.text=n.name,e.appendChild(t)}}})(),document.querySelector("#task-modal").style.display="block"})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{x()})),document.querySelector(".add-project").addEventListener("click",(()=>{document.querySelector("#project-form").reset(),n(),document.querySelector("#project-modal").style.display="block"})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?I():event.target==document.querySelector("#project-modal")&&x()})),document.querySelector("#project-form-submit").addEventListener("click",(t=>{t.preventDefault(),(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),n=!0;return""===e?(t.textContent="Please enter a name for the project.",n=!1):(t.textContent="",n=!0),!!n})()&&((()=>{let t=(()=>{let t=document.querySelector("#name").value,n=document.querySelector("#color").value;return new e(t,n)})();if(null===r.getData()){let e=[];e.push(t),r.saveData(e)}else{let e=r.getData();e.push(t),r.saveData(e)}})(),(()=>{let e=document.querySelector(".project-container ul");for(;e.firstChild;)e.removeChild(e.lastChild)})(),q(),T(),x())})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let n=document.querySelector("#task-error"),r=document.querySelector("#project-error"),a=!0,o=!0;return""===e?(n.textContent="Please enter a task name.",o=!1):(n.textContent="",o=!0),""===t&&null===document.querySelector("#project").firstChild?(r.textContent="Please create a project before adding a task.",a=!1):(r.textContent="",a=!0),!(!a||!o)})()&&((()=>{let e=(()=>{let e=document.querySelector("#task").value,n=document.querySelector("#dueDate").value;return new t(e,n)})(),n=document.querySelector("#project").value,a=r.getData();a.forEach((t=>{t.name===n&&t.tasks.push(e)})),r.saveData(a)})(),I())})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),I()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),x()})),j(),b(),q(),T(),(()=>{let e=document.querySelector(".list-name");document.querySelector("#all-tasks").addEventListener("click",(()=>{L(),e.textContent="ALL",(()=>{if(null!==r.getData()){let e=r.getData(),t=0;e.forEach((e=>{let n=e.color,r=0;e.tasks.forEach((e=>{w(e,n,t,r),r++})),t++}))}})()})),document.querySelector("#today-tasks").addEventListener("click",(()=>{L(),e.textContent="TODAY",j()})),document.querySelector("#week-tasks").addEventListener("click",(()=>{L(),e.textContent="WEEK",b()}))})(),document.querySelectorAll(".checkbox").forEach((e=>{e.addEventListener("click",(()=>{if(e.classList.contains("checked"))e.removeChild(e.lastChild);else{let t=document.createElement("img");t.src="./img/check.png",e.appendChild(t)}e.classList.toggle("checked")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,