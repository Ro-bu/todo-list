(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}overWriteTasks(e){this.tasks=e}}class t{constructor(e,t,n=!1){this.name=e,this.date=t,this.done=n}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const n=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class a{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}}Math.pow(10,8);var r=36e5;function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function l(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function c(e,t){o(1,arguments);var n=t||{},a=null==n.additionalDigits?2:l(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var r,c=m(e);if(c.date){var d=p(c.date,a);r=h(d.restDateString,d.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);var s,i=r.getTime(),u=0;if(c.time&&(u=g(c.time),isNaN(u)))return new Date(NaN);if(!c.timezone){var f=new Date(i+u),v=new Date(0);return v.setFullYear(f.getUTCFullYear(),f.getUTCMonth(),f.getUTCDate()),v.setHours(f.getUTCHours(),f.getUTCMinutes(),f.getUTCSeconds(),f.getUTCMilliseconds()),v}return s=y(c.timezone),isNaN(s)?new Date(NaN):new Date(i+u+s)}var d={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,i=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,u=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(e){var t,n={},a=e.split(d.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?t=a[0]:(n.date=a[0],t=a[1],d.timeZoneDelimiter.test(n.date)&&(n.date=e.split(d.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var r=d.timezone.exec(t);r?(n.time=t.replace(r[1],""),n.timezone=r[1]):n.time=t}return n}function p(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),a=e.match(n);if(!a)return{year:NaN,restDateString:""};var r=a[1]?parseInt(a[1]):null,o=a[2]?parseInt(a[2]):null;return{year:null===o?r:100*o,restDateString:e.slice((a[1]||a[2]).length)}}function h(e,t){if(null===t)return new Date(NaN);var n=e.match(s);if(!n)return new Date(NaN);var a=!!n[4],r=f(n[1]),o=f(n[2])-1,l=f(n[3]),c=f(n[4]),d=f(n[5])-1;if(a)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,d)?function(e,t,n){var a=new Date(0);a.setUTCFullYear(e,0,4);var r=7*(t-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(t,c,d):new Date(NaN);var i=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(D[t]||(k(e)?29:28))}(t,o,l)&&function(e,t){return t>=1&&t<=(k(e)?366:365)}(t,r)?(i.setUTCFullYear(t,o,Math.max(r,l)),i):new Date(NaN)}function f(e){return e?parseInt(e):1}function g(e){var t=e.match(i);if(!t)return NaN;var n=v(t[1]),a=v(t[2]),o=v(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,a,o)?n*r+6e4*a+1e3*o:NaN}function v(e){return e&&parseFloat(e.replace(",","."))||0}function y(e){if("Z"===e)return 0;var t=e.match(u);if(!t)return 0;var n="+"===t[1]?-1:1,a=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(a*r+6e4*o):NaN}var D=[31,null,31,30,31,30,31,31,30,31,30,31];function k(e){return e%400==0||e%4==0&&e%100!=0}function C(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function S(e,t){o(2,arguments);var n=C(e),a=C(t),r=n.getTime()-a.getTime();return r<0?-1:r>0?1:r}function E(e,t){o(2,arguments);var n=C(e),a=l(t);return isNaN(a)?new Date(NaN):a?(n.setDate(n.getDate()+a),n):n}function N(e,t){o(2,arguments);var n=C(e),a=l(t);if(isNaN(a))return new Date(NaN);if(!a)return n;var r=n.getDate(),c=new Date(n.getTime());c.setMonth(n.getMonth()+a+1,0);var d=c.getDate();return r>=d?c:(n.setFullYear(c.getFullYear(),c.getMonth(),r),n)}const w=()=>{null!==a.getData()&&a.getData().forEach((e=>{(e=>{let t=document.createElement("li");t.dataset.project=e.name;let n=document.createElement("span"),a=document.createElement("span"),r=document.createElement("div");a.textContent="(0)",n.textContent=e.name,r.style.backgroundColor=e.color,t.appendChild(r),t.appendChild(n),t.appendChild(a),document.querySelector(".project-container ul").appendChild(t)})(e)}))},q=(e,t,n,a)=>{let r=document.createElement("li");r.dataset.projectIndex=n,r.dataset.taskIndex=a;let o=document.createElement("div");o.classList.add("color-block"),o.style.backgroundColor=t;let l=document.createElement("div");l.classList.add("task-container");let c=document.createElement("div");c.classList.add("task-and-checkbox");let d=document.createElement("div");if(d.classList.add("checkbox"),!0===e.done){d.classList.add("checked");let e=document.createElement("img");e.src="./img/check.png",d.appendChild(e)}let s=document.createElement("div");s.classList.add("task-name"),s.textContent=e.name;let i=document.createElement("div");i.classList.add("date-and-edit");let u=document.createElement("date");u.classList.add("date"),""===e.date?u.textContent="No due date":u.textContent=e.date;let m=document.createElement("span"),p=document.createElement("img");p.src="./img/credit-card-edit.png";let h=document.createElement("span"),f=document.createElement("img");f.src="./img/delete.png",r.appendChild(o),r.appendChild(l),l.appendChild(c),c.appendChild(d),c.appendChild(s),l.appendChild(i),i.appendChild(u),m.appendChild(p),h.appendChild(f),i.appendChild(m),i.appendChild(h),document.querySelector(".bot-content-block ul").appendChild(r)},j=()=>{let e=c((new Date).toISOString().split("T")[0]),t=a.getData(),n=0;t.forEach((t=>{let a=t.color,r=0;t.tasks.forEach((t=>{0===S(c(t.date),e)&&q(t,a,n,r),r++})),n++}))},b=()=>{let e=c((new Date).toISOString().split("T")[0]),t=function(e,t){if(o(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n=t.years?l(t.years):0,a=t.months?l(t.months):0,r=t.weeks?l(t.weeks):0,c=t.days?l(t.days):0,d=t.hours?l(t.hours):0,s=t.minutes?l(t.minutes):0,i=t.seconds?l(t.seconds):0,u=C(e),m=a||n?N(u,a+12*n):u,p=c||r?E(m,c+7*r):m,h=1e3*(i+60*(s+60*d));return new Date(p.getTime()+h)}(e,{days:7}),n=a.getData(),r=0;n.forEach((n=>{let a=n.color,o=0;n.tasks.forEach((n=>{-1===S(c(n.date),t)&&-1!==S(c(n.date),e)&&q(n,a,r,o),o++})),r++}))},x=()=>{let e=document.querySelector(".bot-content-block ul");for(;e.firstChild;)e.removeChild(e.lastChild)},T=()=>{let e=document.querySelector(".list-name");document.querySelectorAll(".project-container ul li").forEach((t=>{t.addEventListener("click",(t=>{x(),e.textContent=String(t.target.closest("li").dataset.project),(e=>{if(null!==a.getData()){let t=a.getData(),n=0;t.forEach((t=>{let a=0;if(t.name===e){let e=t.color;t.tasks.forEach((t=>{q(t,e,n,a),a++}))}n++}))}})(t.target.closest("li").dataset.project)}))}))},L=()=>{document.querySelectorAll(".checkbox").forEach((n=>{n.addEventListener("click",(()=>{if(n.classList.contains("checked"))n.removeChild(n.lastChild);else{let e=document.createElement("img");e.src="./img/check.png",n.appendChild(e)}let r=(()=>{let n=[];return a.getData().forEach((a=>{let r=new e(a.name,a.color);a.tasks.forEach((e=>{r.addTask(new t(e.name,e.date,e.done))})),n.push(r)})),n})(),o=parseInt(n.parentElement.parentElement.parentElement.dataset.projectIndex),l=parseInt(n.parentElement.parentElement.parentElement.dataset.taskIndex);r[o].tasks[l].toggleDone(),a.saveData(r),n.classList.toggle("checked")}))}))},I=()=>{document.querySelector("#project-modal").style.display="none"},U=()=>{document.querySelector("#task-modal").style.display="none"};document.querySelector("#task-modal-close").addEventListener("click",(()=>{U()})),document.querySelector(".add-task").addEventListener("click",(()=>{document.querySelector("#task-form").reset(),n(),(()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)})(),(()=>{let e=document.querySelector("#project");if(null!==a.getData()){let t=a.getData();for(const n of t){let t=document.createElement("option");t.value=n.name,t.text=n.name,e.appendChild(t)}}})(),document.querySelector("#task-modal").style.display="block"})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{I()})),document.querySelector(".add-project").addEventListener("click",(()=>{document.querySelector("#project-form").reset(),n(),document.querySelector("#project-modal").style.display="block"})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?U():event.target==document.querySelector("#project-modal")&&I()})),document.querySelector("#project-form-submit").addEventListener("click",(t=>{t.preventDefault(),(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),n=!0;return""===e?(t.textContent="Please enter a name for the project.",n=!1):(t.textContent="",n=!0),!!n})()&&((()=>{let t=(()=>{let t=document.querySelector("#name").value,n=document.querySelector("#color").value;return new e(t,n)})();if(null===a.getData()){let e=[];e.push(t),a.saveData(e)}else{let e=a.getData();e.push(t),a.saveData(e)}})(),(()=>{let e=document.querySelector(".project-container ul");for(;e.firstChild;)e.removeChild(e.lastChild)})(),w(),T(),I())})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let n=document.querySelector("#task-error"),a=document.querySelector("#project-error"),r=!0,o=!0;return""===e?(n.textContent="Please enter a task name.",o=!1):(n.textContent="",o=!0),""===t&&null===document.querySelector("#project").firstChild?(a.textContent="Please create a project before adding a task.",r=!1):(a.textContent="",r=!0),!(!r||!o)})()&&((()=>{let e=(()=>{let e=document.querySelector("#task").value,n=document.querySelector("#dueDate").value;return new t(e,n)})(),n=document.querySelector("#project").value,r=a.getData();r.forEach((t=>{t.name===n&&t.tasks.push(e)})),a.saveData(r)})(),U())})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),U()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),I()})),j(),b(),w(),T(),(()=>{let e=document.querySelector(".list-name");document.querySelector("#all-tasks").addEventListener("click",(()=>{x(),e.textContent="ALL",(()=>{if(null!==a.getData()){let e=a.getData(),t=0;e.forEach((e=>{let n=e.color,a=0;e.tasks.forEach((e=>{q(e,n,t,a),a++})),t++}))}})(),L()})),document.querySelector("#today-tasks").addEventListener("click",(()=>{x(),e.textContent="TODAY",j()})),document.querySelector("#week-tasks").addEventListener("click",(()=>{x(),e.textContent="WEEK",b()}))})(),L()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,