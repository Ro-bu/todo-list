(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}}class t{constructor(e,t="No due date"){this.name=e,this.date=t,this.done=!1}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const r=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class o{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}}const c=()=>{document.querySelector("#project-modal").style.display="none"},n=()=>{document.querySelector("#task-modal").style.display="none"};document.querySelector("#task-modal-close").addEventListener("click",(()=>{n()})),document.querySelector(".add-task").addEventListener("click",(()=>{document.querySelector("#task-form").reset(),r(),(()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)})(),(()=>{let e=document.querySelector("#project");if(null!==o.getData()){let t=o.getData();for(const r of t){let t=document.createElement("option");t.value=r.name,t.text=r.name,e.appendChild(t)}}})(),document.querySelector("#task-modal").style.display="block"})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{c()})),document.querySelector(".add-project").addEventListener("click",(()=>{document.querySelector("#project-form").reset(),r(),document.querySelector("#project-modal").style.display="block"})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?n():event.target==document.querySelector("#project-modal")&&c()})),document.querySelector("#project-form-submit").addEventListener("click",(t=>{t.preventDefault(),(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),r=!0;return""===e?(t.textContent="Please enter a name for the project.",r=!1):(t.textContent="",r=!0),!!r})()&&((()=>{let t=(()=>{let t=document.querySelector("#name").value,r=document.querySelector("#color").value;return new e(t,r)})();if(null===o.getData()){let e=[];e.push(t),o.saveData(e)}else{let e=o.getData();e.push(t),o.saveData(e)}})(),c())})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let r=document.querySelector("#task-error"),o=document.querySelector("#project-error"),c=!0,n=!0;return""===e?(r.textContent="Please enter a task name.",n=!1):(r.textContent="",n=!0),""===t&&null===document.querySelector("#project").firstChild?(o.textContent="Please create a project before adding a task.",c=!1):(o.textContent="",c=!0),!(!c||!n)})()&&((()=>{let e=(()=>{let e=document.querySelector("#task").value,r=document.querySelector("#dueDate").value;return new t(e,r)})(),r=document.querySelector("#project").value,c=o.getData();c.forEach((t=>{t.name===r&&t.tasks.push(e)})),o.saveData(c)})(),n())})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),n()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),c()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,