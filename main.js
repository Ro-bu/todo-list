(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}overWriteTasks(e){this.tasks=e}}class t{constructor(e,t,a=!1){this.name=e,this.date=t,this.done=a}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const a=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class n{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}static dummyCheck(){null===JSON.parse(localStorage.getItem("projectList"))&&localStorage.setItem("projectList",JSON.stringify(r))}}let r=[{name:"Gym",color:"#ef2929",tasks:[{name:"Max day",date:"2022-05-06",done:!1},{name:"Squat 180kg",date:"",done:!1}]},{name:"Work",color:"#fce94f",tasks:[{name:"Team meeting",date:"2022-05-19",done:!1},{name:"New project presentation",date:"2022-05-31",done:!1},{name:"Madeleine's bday",date:"2022-08-17",done:!1},{name:"Get cookies for the team",date:"2022-04-06",done:!0}]},{name:"Chores",color:"#204a87",tasks:[{name:"Wash the car",date:"",done:!1},{name:"Batteries for the remote",date:"",done:!0},{name:"New lightbulb for the bathroom",date:"",done:!0}]}];Math.pow(10,8);var o=36e5;function c(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function l(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function d(e,t){c(1,arguments);var a=t||{},n=null==a.additionalDigits?2:l(a.additionalDigits);if(2!==n&&1!==n&&0!==n)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var r,o=p(e);if(o.date){var d=h(o.date,n);r=f(d.restDateString,d.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);var s,i=r.getTime(),u=0;if(o.time&&(u=S(o.time),isNaN(u)))return new Date(NaN);if(!o.timezone){var m=new Date(i+u),y=new Date(0);return y.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),y.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),y}return s=g(o.timezone),isNaN(s)?new Date(NaN):new Date(i+u+s)}var s={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},i=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,m=/^([+-])(\d{2})(?::?(\d{2}))?$/;function p(e){var t,a={},n=e.split(s.dateTimeDelimiter);if(n.length>2)return a;if(/:/.test(n[0])?t=n[0]:(a.date=n[0],t=n[1],s.timeZoneDelimiter.test(a.date)&&(a.date=e.split(s.timeZoneDelimiter)[0],t=e.substr(a.date.length,e.length))),t){var r=s.timezone.exec(t);r?(a.time=t.replace(r[1],""),a.timezone=r[1]):a.time=t}return a}function h(e,t){var a=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),n=e.match(a);if(!n)return{year:NaN,restDateString:""};var r=n[1]?parseInt(n[1]):null,o=n[2]?parseInt(n[2]):null;return{year:null===o?r:100*o,restDateString:e.slice((n[1]||n[2]).length)}}function f(e,t){if(null===t)return new Date(NaN);var a=e.match(i);if(!a)return new Date(NaN);var n=!!a[4],r=y(a[1]),o=y(a[2])-1,c=y(a[3]),l=y(a[4]),d=y(a[5])-1;if(n)return function(e,t,a){return t>=1&&t<=53&&a>=0&&a<=6}(0,l,d)?function(e,t,a){var n=new Date(0);n.setUTCFullYear(e,0,4);var r=7*(t-1)+a+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+r),n}(t,l,d):new Date(NaN);var s=new Date(0);return function(e,t,a){return t>=0&&t<=11&&a>=1&&a<=(v[t]||(D(e)?29:28))}(t,o,c)&&function(e,t){return t>=1&&t<=(D(e)?366:365)}(t,r)?(s.setUTCFullYear(t,o,Math.max(r,c)),s):new Date(NaN)}function y(e){return e?parseInt(e):1}function S(e){var t=e.match(u);if(!t)return NaN;var a=k(t[1]),n=k(t[2]),r=k(t[3]);return function(e,t,a){return 24===e?0===t&&0===a:a>=0&&a<60&&t>=0&&t<60&&e>=0&&e<25}(a,n,r)?a*o+6e4*n+1e3*r:NaN}function k(e){return e&&parseFloat(e.replace(",","."))||0}function g(e){if("Z"===e)return 0;var t=e.match(m);if(!t)return 0;var a="+"===t[1]?-1:1,n=parseInt(t[2]),r=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,r)?a*(n*o+6e4*r):NaN}var v=[31,null,31,30,31,30,31,31,30,31,30,31];function D(e){return e%400==0||e%4==0&&e%100!=0}function E(e){c(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function q(e,t){c(2,arguments);var a=E(e),n=E(t),r=a.getTime()-n.getTime();return r<0?-1:r>0?1:r}function C(e,t){c(2,arguments);var a=E(e),n=l(t);return isNaN(n)?new Date(NaN):n?(a.setDate(a.getDate()+n),a):a}function j(e,t){c(2,arguments);var a=E(e),n=l(t);if(isNaN(n))return new Date(NaN);if(!n)return a;var r=a.getDate(),o=new Date(a.getTime());o.setMonth(a.getMonth()+n+1,0);var d=o.getDate();return r>=d?o:(a.setFullYear(o.getFullYear(),o.getMonth(),r),a)}const x=()=>{let a=[];return n.getData().forEach((n=>{let r=new e(n.name,n.color);n.tasks.forEach((e=>{r.addTask(new t(e.name,e.date,e.done))})),a.push(r)})),a},N=()=>{null!==n.getData()&&n.getData().forEach((e=>{(e=>{let t=document.createElement("li");t.dataset.project=e.name;let a=document.createElement("span"),n=document.createElement("div");a.textContent=e.name,n.style.backgroundColor=e.color,t.appendChild(n),t.appendChild(a),document.querySelector(".project-container ul").appendChild(t)})(e)}))},w=(e,t,a,n)=>{let r=document.createElement("li");r.dataset.projectIndex=a,r.dataset.taskIndex=n;let o=document.createElement("div");o.classList.add("color-block"),o.style.backgroundColor=t;let c=document.createElement("div");c.classList.add("task-container");let l=document.createElement("div");l.classList.add("task-and-checkbox");let d=document.createElement("div");if(d.classList.add("checkbox"),!0===e.done){d.classList.add("checked");let e=document.createElement("img");e.src="./img/check.png",d.appendChild(e)}let s=document.createElement("div");s.classList.add("task-name"),s.textContent=e.name;let i=document.createElement("div");i.classList.add("date-and-edit");let u=document.createElement("date");u.classList.add("date"),""===e.date?u.textContent="No due date":u.textContent=e.date;let m=document.createElement("span");m.classList.add("task-edit-button");let p=document.createElement("img");p.src="./img/credit-card-edit.png";let h=document.createElement("span"),f=document.createElement("img");f.src="./img/delete.png",r.appendChild(o),r.appendChild(c),c.appendChild(l),l.appendChild(d),l.appendChild(s),c.appendChild(i),i.appendChild(u),m.appendChild(p),h.appendChild(f),i.appendChild(m),i.appendChild(h),e.done?document.querySelector(".bot-content-block ul").append(r):document.querySelector(".bot-content-block ul").prepend(r)},b=()=>{if(null!==n.getData()){let e=n.getData(),t=0;e.forEach((e=>{let a=e.color,n=0;e.tasks.forEach((e=>{w(e,a,t,n),n++})),t++}))}},L=e=>{if(null!==n.getData()){let t=n.getData(),a=0;t.forEach((t=>{let n=0;if(t.name===e){let e=t.color;t.tasks.forEach((t=>{w(t,e,a,n),n++}))}a++}))}},T=()=>{let e=d((new Date).toISOString().split("T")[0]),t=n.getData(),a=0;t.forEach((t=>{let n=t.color,r=0;t.tasks.forEach((t=>{0===q(d(t.date),e)&&w(t,n,a,r),r++})),a++}))},I=()=>{let e=d((new Date).toISOString().split("T")[0]),t=function(e,t){if(c(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var a=t.years?l(t.years):0,n=t.months?l(t.months):0,r=t.weeks?l(t.weeks):0,o=t.days?l(t.days):0,d=t.hours?l(t.hours):0,s=t.minutes?l(t.minutes):0,i=t.seconds?l(t.seconds):0,u=E(e),m=n||a?j(u,n+12*a):u,p=o||r?C(m,o+7*r):m,h=1e3*(i+60*(s+60*d));return new Date(p.getTime()+h)}(e,{days:7}),a=n.getData(),r=0;a.forEach((a=>{let n=a.color,o=0;a.tasks.forEach((a=>{-1===q(d(a.date),t)&&-1!==q(d(a.date),e)&&w(a,n,r,o),o++})),r++}))},A=()=>{let e=document.querySelector(".bot-content-block ul");for(;e.firstChild;)e.removeChild(e.lastChild)},O=()=>{(()=>{let e=document.querySelector(".project-container ul");for(;e.firstChild;)e.removeChild(e.lastChild)})(),N(),P()},M=()=>{let e=document.querySelector(".list-name").textContent;switch(e){case"ALL":A(),b();break;case"TODAY":A(),T();break;case"WEEK":A(),I();break;default:A(),L(e)}Y()};class U{static add(){let e=document.querySelector(".list-edit-delete"),t=document.createElement("span");t.textContent="Edit";let a=document.createElement("span");a.textContent="Delete",e.append(t),e.append(a)}static clear(){let e=document.querySelector(".list-edit-delete");for(;e.firstChild;)e.removeChild(e.lastChild)}}const P=()=>{let e=document.querySelector(".list-name");document.querySelectorAll(".project-container ul li").forEach((t=>{t.addEventListener("click",(t=>{A(),e.textContent=String(t.target.closest("li").dataset.project),L(t.target.closest("li").dataset.project),Y(),U.clear(),U.add(),document.querySelector(".list-edit-delete span:first-child").addEventListener("click",(()=>{B()})),document.querySelector(".list-edit-delete span:last-child").addEventListener("click",(()=>{(()=>{let e=document.querySelector(".top-content-block h2").textContent,t=n.getData(),a=0;t.forEach((n=>{n.name===e&&t.splice(a,1),a++})),n.saveData(t)})(),A(),document.querySelector(".list-name").textContent="ALL",b(),Y(),U.clear(),O()}))}))}))},W=()=>{document.querySelectorAll(".date-and-edit span:last-child").forEach((e=>{e.addEventListener("click",(()=>{let t=x(),a=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),r=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t[a].tasks.splice(r,1),n.saveData(t),M()}))}))},Y=()=>{document.querySelectorAll(".checkbox").forEach((e=>{e.addEventListener("click",(()=>{if(e.classList.contains("checked"))e.removeChild(e.lastChild);else{let t=document.createElement("img");t.src="./img/check.png",e.appendChild(t)}let t=x(),a=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),r=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t[a].tasks[r].toggleDone(),n.saveData(t),e.classList.toggle("checked")}))})),W(),V()},F=()=>{document.querySelector("#project-modal").style.display="none",document.querySelector("#project-modal .modal-top span:first-child").textContent="ADD PROJECT",document.querySelector("#project-form-submit").textContent="Add Project"},J=()=>{document.querySelector("#project-form").reset(),a(),document.querySelector("#project-modal").style.display="block"},Z=()=>{document.querySelector("#task-modal").style.display="none",delete document.querySelector("#task-modal .modal-top span:first-child").dataset.taskIndex,delete document.querySelector("#task-modal .modal-top span:first-child").dataset.projectIndex,document.querySelector("#task-modal .modal-top span:first-child").textContent="ADD TASK",document.querySelector("#task-form-submit").textContent="Add Task"},z=()=>{document.querySelector("#task-form").reset(),a(),G(),H(),document.querySelector("#task-modal").style.display="block"},K=()=>{(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),a=!0;return""===e?(t.textContent="Please enter a name for the project.",a=!1):(t.textContent="",a=!0),!!a})()&&("EDIT PROJECT"===document.querySelector("#project-modal .modal-top span:first-child").textContent?(Q(),O(),M(),F()):((()=>{let t=(()=>{let t=document.querySelector("#name").value,a=document.querySelector("#color").value;return new e(t,a)})();if(null===n.getData()){let e=[];e.push(t),n.saveData(e)}else{let e=n.getData();e.push(t),n.saveData(e)}})(),O(),F()))},R=()=>{let e=(()=>{let e=document.querySelector("#task").value,a=document.querySelector("#dueDate").value;return new t(e,a)})(),a=document.querySelector("#project").value,r=n.getData();r.forEach((t=>{t.name===a&&t.tasks.push(e)})),n.saveData(r)},$=()=>{(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let a=document.querySelector("#task-error"),n=document.querySelector("#project-error"),r=!0,o=!0;return""===e?(a.textContent="Please enter a task name.",o=!1):(a.textContent="",o=!0),""===t&&null===document.querySelector("#project").firstChild?(n.textContent="Please create a project before adding a task.",r=!1):(n.textContent="",r=!0),!(!r||!o)})()&&("EDIT TASK"===document.querySelector("#task-modal .modal-top span:first-child").textContent?(X(),Z(),M()):(R(),Z(),M()))},G=()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)},H=()=>{let e=document.querySelector("#project");if(null!==n.getData()){let t=n.getData();for(const a of t){let t=document.createElement("option");t.value=a.name,t.text=a.name,e.appendChild(t)}}},B=()=>{let e=document.querySelector(".top-content-block h2").textContent,t=n.getData(),a=0;t.forEach((t=>{if(t.name===e){J();let n=document.querySelector("#project-modal .modal-top span:first-child");n.textContent="EDIT PROJECT",document.querySelector("#project-form-submit").textContent="Edit Project";let r=document.querySelector("#name"),o=document.querySelector("#color");r.value=e,o.value=t.color,n.dataset.projectIndex=a}a++}))},Q=()=>{let e=x(),t=document.querySelector("#name"),a=document.querySelector("#color"),r=parseInt(document.querySelector("#project-modal .modal-top span:first-child").dataset.projectIndex);e[r].newName(t.value),e[r].newColor(a.value),document.querySelector(".list-name").textContent=t.value,n.saveData(e),delete document.querySelector("#project-modal .modal-top span:first-child").dataset.projectIndex},V=()=>{document.querySelectorAll(".task-edit-button").forEach((e=>{e.addEventListener("click",(()=>{z();let t=document.querySelector("#task-modal .modal-top span:first-child");t.textContent="EDIT TASK",document.querySelector("#task-form-submit").textContent="Edit Task";let a=n.getData(),r=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),o=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t.dataset.projectIndex=r,t.dataset.taskIndex=o;let c=document.querySelector("#task"),l=document.querySelector("#dueDate"),d=document.querySelector("#project"),s=a[r].tasks[o];c.value=s.name,d.value=a[r].name,""!==s.date&&(l.value=s.date)}))}))},X=()=>{let e=x(),t=document.querySelector("#task"),a=document.querySelector("#dueDate"),r=document.querySelector("#project"),o=parseInt(document.querySelector("#task-modal .modal-top span:first-child").dataset.projectIndex),c=parseInt(document.querySelector("#task-modal .modal-top span:first-child").dataset.taskIndex);r.value===e[o].name?(e[o].tasks[c].newName(t.value),e[o].tasks[c].newDate(a.value),n.saveData(e)):(e[o].tasks.splice(c,1),n.saveData(e),R())};n.dummyCheck(),document.querySelector("#project-form").addEventListener("submit",(e=>{e.preventDefault(),K()})),document.querySelector("#task-form").addEventListener("submit",(e=>{e.preventDefault(),$()})),document.querySelector("#task-modal-close").addEventListener("click",(()=>{Z()})),document.querySelector(".add-task").addEventListener("click",(()=>{z()})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{F()})),document.querySelector(".add-project").addEventListener("click",(()=>{J()})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?Z():event.target==document.querySelector("#project-modal")&&F()})),document.querySelector("#project-form-submit").addEventListener("click",(e=>{e.preventDefault(),K()})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),$()})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),Z()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),F()})),b(),N(),P(),(()=>{let e=document.querySelector(".list-name");document.querySelector("#all-tasks").addEventListener("click",(()=>{A(),e.textContent="ALL",b(),Y(),U.clear()})),document.querySelector("#today-tasks").addEventListener("click",(()=>{A(),e.textContent="TODAY",T(),Y(),U.clear()})),document.querySelector("#week-tasks").addEventListener("click",(()=>{A(),e.textContent="WEEK",I(),Y(),U.clear()}))})(),Y(),W(),document.querySelector("#projects").addEventListener("click",(()=>{document.querySelector("body").clientWidth<=1e3&&document.querySelector(".project-container").classList.toggle("visible")})),window.addEventListener("click",(e=>{document.querySelector("body").clientWidth<=1e3&&!e.target.contains(document.querySelector(".project-container"))&&!e.target.contains(document.querySelector("#projects"))&&document.querySelector(".project-container").classList.remove("visible")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,