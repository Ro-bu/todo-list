(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}overWriteTasks(e){this.tasks=e}}class t{constructor(e,t,a=!1){this.name=e,this.date=t,this.done=a}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const a=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class n{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}static dummyCheck(){null===JSON.parse(localStorage.getItem("projectList"))&&localStorage.setItem("projectList",JSON.stringify(r))}}let r=[{name:"Gym",color:"#ef2929",tasks:[{name:"Max day",date:"2022-05-06",done:!1},{name:"Squat 180kg",date:"",done:!1}]},{name:"Work",color:"#fce94f",tasks:[{name:"Team meeting",date:"2022-05-19",done:!1},{name:"New project presentation",date:"2022-05-31",done:!1},{name:"Madeleine's bday",date:"2022-08-17",done:!1},{name:"Get cookies for the team",date:"2022-04-06",done:!0}]},{name:"Chores",color:"#204a87",tasks:[{name:"Wash the car",date:"",done:!1},{name:"Batteries for the remote",date:"",done:!0},{name:"New lightbulb for the bathroom",date:"",done:!0}]}];Math.pow(10,8);var o=36e5;function l(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function d(e,t){l(1,arguments);var a=t||{},n=null==a.additionalDigits?2:c(a.additionalDigits);if(2!==n&&1!==n&&0!==n)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var r,o=p(e);if(o.date){var d=h(o.date,n);r=f(d.restDateString,d.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);var s,u=r.getTime(),i=0;if(o.time&&(i=k(o.time),isNaN(i)))return new Date(NaN);if(!o.timezone){var m=new Date(u+i),y=new Date(0);return y.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),y.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),y}return s=g(o.timezone),isNaN(s)?new Date(NaN):new Date(u+i+s)}var s={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},u=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,i=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,m=/^([+-])(\d{2})(?::?(\d{2}))?$/;function p(e){var t,a={},n=e.split(s.dateTimeDelimiter);if(n.length>2)return a;if(/:/.test(n[0])?t=n[0]:(a.date=n[0],t=n[1],s.timeZoneDelimiter.test(a.date)&&(a.date=e.split(s.timeZoneDelimiter)[0],t=e.substr(a.date.length,e.length))),t){var r=s.timezone.exec(t);r?(a.time=t.replace(r[1],""),a.timezone=r[1]):a.time=t}return a}function h(e,t){var a=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),n=e.match(a);if(!n)return{year:NaN,restDateString:""};var r=n[1]?parseInt(n[1]):null,o=n[2]?parseInt(n[2]):null;return{year:null===o?r:100*o,restDateString:e.slice((n[1]||n[2]).length)}}function f(e,t){if(null===t)return new Date(NaN);var a=e.match(u);if(!a)return new Date(NaN);var n=!!a[4],r=y(a[1]),o=y(a[2])-1,l=y(a[3]),c=y(a[4]),d=y(a[5])-1;if(n)return function(e,t,a){return t>=1&&t<=53&&a>=0&&a<=6}(0,c,d)?function(e,t,a){var n=new Date(0);n.setUTCFullYear(e,0,4);var r=7*(t-1)+a+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+r),n}(t,c,d):new Date(NaN);var s=new Date(0);return function(e,t,a){return t>=0&&t<=11&&a>=1&&a<=(v[t]||(D(e)?29:28))}(t,o,l)&&function(e,t){return t>=1&&t<=(D(e)?366:365)}(t,r)?(s.setUTCFullYear(t,o,Math.max(r,l)),s):new Date(NaN)}function y(e){return e?parseInt(e):1}function k(e){var t=e.match(i);if(!t)return NaN;var a=S(t[1]),n=S(t[2]),r=S(t[3]);return function(e,t,a){return 24===e?0===t&&0===a:a>=0&&a<60&&t>=0&&t<60&&e>=0&&e<25}(a,n,r)?a*o+6e4*n+1e3*r:NaN}function S(e){return e&&parseFloat(e.replace(",","."))||0}function g(e){if("Z"===e)return 0;var t=e.match(m);if(!t)return 0;var a="+"===t[1]?-1:1,n=parseInt(t[2]),r=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,r)?a*(n*o+6e4*r):NaN}var v=[31,null,31,30,31,30,31,31,30,31,30,31];function D(e){return e%400==0||e%4==0&&e%100!=0}function E(e){l(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function C(e,t){l(2,arguments);var a=E(e),n=E(t),r=a.getTime()-n.getTime();return r<0?-1:r>0?1:r}function q(e,t){l(2,arguments);var a=E(e),n=c(t);return isNaN(n)?new Date(NaN):n?(a.setDate(a.getDate()+n),a):a}function j(e,t){l(2,arguments);var a=E(e),n=c(t);if(isNaN(n))return new Date(NaN);if(!n)return a;var r=a.getDate(),o=new Date(a.getTime());o.setMonth(a.getMonth()+n+1,0);var d=o.getDate();return r>=d?o:(a.setFullYear(o.getFullYear(),o.getMonth(),r),a)}const x=()=>{let a=[];return n.getData().forEach((n=>{let r=new e(n.name,n.color);n.tasks.forEach((e=>{r.addTask(new t(e.name,e.date,e.done))})),a.push(r)})),a},N=()=>{null!==n.getData()&&n.getData().forEach((e=>{(e=>{let t=document.createElement("li");t.dataset.project=e.name;let a=document.createElement("span"),n=document.createElement("div");a.textContent=e.name,n.style.backgroundColor=e.color,t.appendChild(n),t.appendChild(a),document.querySelector(".project-container ul").appendChild(t)})(e)}))},w=(e,t,a,n)=>{let r=document.createElement("li");r.dataset.projectIndex=a,r.dataset.taskIndex=n;let o=document.createElement("div");o.classList.add("color-block"),o.style.backgroundColor=t;let l=document.createElement("div");l.classList.add("task-container");let c=document.createElement("div");c.classList.add("task-and-checkbox");let d=document.createElement("div");if(d.classList.add("checkbox"),!0===e.done){d.classList.add("checked");let e=document.createElement("img");e.src="./img/check.png",d.appendChild(e)}let s=document.createElement("div");s.classList.add("task-name"),s.textContent=e.name;let u=document.createElement("div");u.classList.add("date-and-edit");let i=document.createElement("date");i.classList.add("date"),""===e.date?i.textContent="No due date":i.textContent=e.date;let m=document.createElement("span");m.classList.add("task-edit-button");let p=document.createElement("img");p.src="./img/credit-card-edit.png";let h=document.createElement("span"),f=document.createElement("img");f.src="./img/delete.png",r.appendChild(o),r.appendChild(l),l.appendChild(c),c.appendChild(d),c.appendChild(s),l.appendChild(u),u.appendChild(i),m.appendChild(p),h.appendChild(f),u.appendChild(m),u.appendChild(h),e.done?document.querySelector(".bot-content-block ul").append(r):document.querySelector(".bot-content-block ul").prepend(r)},b=()=>{if(null!==n.getData()){let e=n.getData(),t=0;e.forEach((e=>{let a=e.color,n=0;e.tasks.forEach((e=>{w(e,a,t,n),n++})),t++}))}},T=e=>{if(null!==n.getData()){let t=n.getData(),a=0;t.forEach((t=>{let n=0;if(t.name===e){let e=t.color;t.tasks.forEach((t=>{w(t,e,a,n),n++}))}a++}))}},I=()=>{let e=d((new Date).toISOString().split("T")[0]),t=n.getData(),a=0;t.forEach((t=>{let n=t.color,r=0;t.tasks.forEach((t=>{0===C(d(t.date),e)&&w(t,n,a,r),r++})),a++}))},L=()=>{let e=d((new Date).toISOString().split("T")[0]),t=function(e,t){if(l(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var a=t.years?c(t.years):0,n=t.months?c(t.months):0,r=t.weeks?c(t.weeks):0,o=t.days?c(t.days):0,d=t.hours?c(t.hours):0,s=t.minutes?c(t.minutes):0,u=t.seconds?c(t.seconds):0,i=E(e),m=n||a?j(i,n+12*a):i,p=o||r?q(m,o+7*r):m,h=1e3*(u+60*(s+60*d));return new Date(p.getTime()+h)}(e,{days:7}),a=n.getData(),r=0;a.forEach((a=>{let n=a.color,o=0;a.tasks.forEach((a=>{-1===C(d(a.date),t)&&-1!==C(d(a.date),e)&&w(a,n,r,o),o++})),r++}))},A=()=>{let e=document.querySelector(".bot-content-block ul");for(;e.firstChild;)e.removeChild(e.lastChild)},O=()=>{(()=>{let e=document.querySelector(".project-container ul");for(;e.firstChild;)e.removeChild(e.lastChild)})(),N(),P()},M=()=>{let e=document.querySelector(".list-name").textContent;switch(e){case"ALL":A(),b();break;case"TODAY":A(),I();break;case"WEEK":A(),L();break;default:A(),T(e)}F()};class U{static add(){let e=document.querySelector(".list-edit-delete"),t=document.createElement("span");t.textContent="Edit";let a=document.createElement("span");a.textContent="Delete",e.append(t),e.append(a)}static clear(){let e=document.querySelector(".list-edit-delete");for(;e.firstChild;)e.removeChild(e.lastChild)}}const P=()=>{let e=document.querySelector(".list-name");document.querySelectorAll(".project-container ul li").forEach((t=>{t.addEventListener("click",(t=>{A(),e.textContent=String(t.target.closest("li").dataset.project),T(t.target.closest("li").dataset.project),F(),U.clear(),U.add(),document.querySelector(".list-edit-delete span:first-child").addEventListener("click",(()=>{B()})),document.querySelector(".list-edit-delete span:last-child").addEventListener("click",(()=>{(()=>{let e=document.querySelector(".top-content-block h2").textContent,t=n.getData(),a=0;t.forEach((n=>{n.name===e&&t.splice(a,1),a++})),n.saveData(t)})(),A(),document.querySelector(".list-name").textContent="ALL",b(),F(),U.clear(),O()}))}))}))},Y=()=>{document.querySelectorAll(".date-and-edit span:last-child").forEach((e=>{e.addEventListener("click",(()=>{let t=x(),a=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),r=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t[a].tasks.splice(r,1),n.saveData(t),M()}))}))},F=()=>{document.querySelectorAll(".checkbox").forEach((e=>{e.addEventListener("click",(()=>{if(e.classList.contains("checked"))e.removeChild(e.lastChild);else{let t=document.createElement("img");t.src="./img/check.png",e.appendChild(t)}let t=x(),a=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),r=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t[a].tasks[r].toggleDone(),n.saveData(t),e.classList.toggle("checked")}))})),Y(),V()},J=()=>{document.querySelector("#project-modal").style.display="none",document.querySelector("#project-modal .modal-top span:first-child").textContent="ADD PROJECT",document.querySelector("#project-form-submit").textContent="Add Project"},W=()=>{document.querySelector("#project-form").reset(),a(),document.querySelector("#project-modal").style.display="block"},Z=()=>{document.querySelector("#task-modal").style.display="none",delete document.querySelector("#task-modal .modal-top span:first-child").dataset.taskIndex,delete document.querySelector("#task-modal .modal-top span:first-child").dataset.projectIndex,document.querySelector("#task-modal .modal-top span:first-child").textContent="ADD TASK",document.querySelector("#task-form-submit").textContent="Add Task"},z=()=>{document.querySelector("#task-form").reset(),a(),G(),H(),document.querySelector("#task-modal").style.display="block"},K=()=>{(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),a=!0;return""===e?(t.textContent="Please enter a name for the project.",a=!1):(t.textContent="",a=!0),!!a})()&&("EDIT PROJECT"===document.querySelector("#project-modal .modal-top span:first-child").textContent?(Q(),O(),M(),J()):((()=>{let t=(()=>{let t=document.querySelector("#name").value,a=document.querySelector("#color").value;return new e(t,a)})();if(null===n.getData()){let e=[];e.push(t),n.saveData(e)}else{let e=n.getData();e.push(t),n.saveData(e)}})(),O(),J()))},R=()=>{let e=(()=>{let e=document.querySelector("#task").value,a=document.querySelector("#dueDate").value;return new t(e,a)})(),a=document.querySelector("#project").value,r=n.getData();r.forEach((t=>{t.name===a&&t.tasks.push(e)})),n.saveData(r)},$=()=>{(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let a=document.querySelector("#task-error"),n=document.querySelector("#project-error"),r=!0,o=!0;return""===e?(a.textContent="Please enter a task name.",o=!1):(a.textContent="",o=!0),""===t&&null===document.querySelector("#project").firstChild?(n.textContent="Please create a project before adding a task.",r=!1):(n.textContent="",r=!0),!(!r||!o)})()&&("EDIT TASK"===document.querySelector("#task-modal .modal-top span:first-child").textContent?(X(),Z(),M()):(R(),Z(),M()))},G=()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)},H=()=>{let e=document.querySelector("#project");if(null!==n.getData()){let t=n.getData();for(const a of t){let t=document.createElement("option");t.value=a.name,t.text=a.name,e.appendChild(t)}}},B=()=>{let e=document.querySelector(".top-content-block h2").textContent,t=n.getData(),a=0;t.forEach((t=>{if(t.name===e){W();let n=document.querySelector("#project-modal .modal-top span:first-child");n.textContent="EDIT PROJECT",document.querySelector("#project-form-submit").textContent="Edit Project";let r=document.querySelector("#name"),o=document.querySelector("#color");r.value=e,o.value=t.color,n.dataset.projectIndex=a}a++}))},Q=()=>{let e=x(),t=document.querySelector("#name"),a=document.querySelector("#color"),r=parseInt(document.querySelector("#project-modal .modal-top span:first-child").dataset.projectIndex);e[r].newName(t.value),e[r].newColor(a.value),document.querySelector(".list-name").textContent=t.value,n.saveData(e),delete document.querySelector("#project-modal .modal-top span:first-child").dataset.projectIndex},V=()=>{document.querySelectorAll(".task-edit-button").forEach((e=>{e.addEventListener("click",(()=>{z();let t=document.querySelector("#task-modal .modal-top span:first-child");t.textContent="EDIT TASK",document.querySelector("#task-form-submit").textContent="Edit Task";let a=n.getData(),r=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),o=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t.dataset.projectIndex=r,t.dataset.taskIndex=o;let l=document.querySelector("#task"),c=document.querySelector("#dueDate"),d=document.querySelector("#project"),s=a[r].tasks[o];l.value=s.name,d.value=a[r].name,""!==s.date&&(c.value=s.date)}))}))},X=()=>{let e=x(),t=document.querySelector("#task"),a=document.querySelector("#dueDate"),r=document.querySelector("#project"),o=parseInt(document.querySelector("#task-modal .modal-top span:first-child").dataset.projectIndex),l=parseInt(document.querySelector("#task-modal .modal-top span:first-child").dataset.taskIndex);r.value===e[o].name?(e[o].tasks[l].newName(t.value),e[o].tasks[l].newDate(a.value),n.saveData(e)):(e[o].tasks.splice(l,1),n.saveData(e),R())};n.dummyCheck(),document.querySelector("#project-form").addEventListener("submit",(e=>{e.preventDefault(),K()})),document.querySelector("#task-form").addEventListener("submit",(e=>{e.preventDefault(),$()})),document.querySelector("#task-modal-close").addEventListener("click",(()=>{Z()})),document.querySelector(".add-task").addEventListener("click",(()=>{z()})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{J()})),document.querySelector(".add-project").addEventListener("click",(()=>{W()})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?Z():event.target==document.querySelector("#project-modal")&&J()})),document.querySelector("#project-form-submit").addEventListener("click",(e=>{e.preventDefault(),K()})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),$()})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),Z()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),J()})),b(),N(),P(),(()=>{let e=document.querySelector(".list-name");document.querySelector("#all-tasks").addEventListener("click",(()=>{A(),e.textContent="ALL",b(),F(),U.clear()})),document.querySelector("#today-tasks").addEventListener("click",(()=>{A(),e.textContent="TODAY",I(),F(),U.clear()})),document.querySelector("#week-tasks").addEventListener("click",(()=>{A(),e.textContent="WEEK",L(),F(),U.clear()}))})(),F(),Y()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQVUxTixTQUFTQyxjQUFjLG1CQUM5Q3dPLE9BR1J6TyxTQUFTQyxjQUFjLHdCQUF3QnNOLGlCQUFpQixTQUFVQyxJQUN0RUEsRUFBRW9ELGlCQUNGM0IsT0FFSmpQLFNBQVNDLGNBQWMscUJBQXFCc04saUJBQWlCLFNBQVVDLElBQ25FQSxFQUFFb0QsaUJBQ0ZmLE9BRUo3UCxTQUFTQyxjQUFjLHFCQUFxQnNOLGlCQUFpQixTQUFVQyxJQUNuRUEsRUFBRW9ELGlCQUNGL0IsT0FFSjdPLFNBQVNDLGNBQWMsd0JBQXdCc04saUJBQWlCLFNBQVVDLElBQ3RFQSxFQUFFb0QsaUJBQ0ZuQyxPQzFPUnRELElBQ0EvQixJSDhUSXlELElBakUwQixNQUMxQixJQUFJTyxFQUFlcE4sU0FBU0MsY0FBYyxjQUMxQ0QsU0FBU0MsY0FBYyxjQUFjc04saUJBQWlCLFNBQVMsS0FDM0RsQixJQUNBZSxFQUFhbE4sWUFBYyxNQUMzQmlMLElBQ0E2QixJQUNBQyxFQUFpQlcsV0FFckI1TixTQUFTQyxjQUFjLGdCQUFnQnNOLGlCQUFpQixTQUFTLEtBQzdEbEIsSUFDQWUsRUFBYWxOLFlBQWMsUUFDM0JzTCxJQUNBd0IsSUFDQUMsRUFBaUJXLFdBRXJCNU4sU0FBU0MsY0FBYyxlQUFlc04saUJBQWlCLFNBQVMsS0FDNURsQixJQUNBZSxFQUFhbE4sWUFBYyxPQUMzQnlMLElBQ0FxQixJQUNBQyxFQUFpQlcsWUE2Q3JCbUQsR0FDQS9ELElBQ0FpQixLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXMvLi9zcmMvZmFjdG9yaWVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzLy4vc3JjL2Zvcm0tdmFsaWRhdG9ycy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpcy8uL3NyYy9zdG9yYWdlLmpzIiwid2VicGFjazovL3RvZG8tbGlzLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXMvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpcy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2VJU08vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXMvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpcy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vY29tcGFyZUFzYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpcy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpcy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTW9udGhzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzLy4vc3JjL29iamVjdC1tZXRob2RzLmpzIiwid2VicGFjazovL3RvZG8tbGlzLy4vc3JjL3VpLmpzIiwid2VicGFjazovL3RvZG8tbGlzLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXMvLi9zcmMvbW9kYWwtY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXMvLi9zcmMvc2NyaXB0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQcm9qZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjb2xvcikge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMudGFza3MgPSBbXTtcbiAgICB9O1xuICAgIG5ld05hbWUobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH07XG4gICAgbmV3Q29sb3IoY29sb3IpIHtcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgICBhZGRUYXNrKHRhc2spIHtcbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKHRhc2spO1xuICAgIH07XG4gICAgb3ZlcldyaXRlVGFza3ModGFza0xpc3QpIHtcbiAgICAgICAgdGhpcy50YXNrcyA9IHRhc2tMaXN0O1xuICAgIH07XG59O1xuXG5jbGFzcyBUYXNrIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkYXRlLCBkb25lID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICAgICAgdGhpcy5kb25lID0gZG9uZTtcbiAgICB9O1xuICAgIG5ld05hbWUobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH07XG4gICAgbmV3RGF0ZShkYXRlKSB7XG4gICAgICAgIHRoaXMuZGF0ZSA9IGRhdGU7XG4gICAgfTtcbiAgICB0b2dnbGVEb25lKCkge1xuICAgICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IHtQcm9qZWN0LCBUYXNrfTsiLCJjb25zdCB2YWxpZGF0ZVByb2plY3RGb3JtID0gKCkgPT4ge1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpLnZhbHVlO1xuICAgIGxldCBwcm9qZWN0RXJyb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbmFtZS1lcnJvclwiKTtcbiAgICBsZXQgbm9Qcm9qZWN0TmFtZUVycm9ycyA9IHRydWU7XG4gICAgaWYgKHByb2plY3ROYW1lID09PSBcIlwiKSB7XG4gICAgICAgIHByb2plY3RFcnJvci50ZXh0Q29udGVudCA9IFwiUGxlYXNlIGVudGVyIGEgbmFtZSBmb3IgdGhlIHByb2plY3QuXCJcbiAgICAgICAgbm9Qcm9qZWN0TmFtZUVycm9ycyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2plY3RFcnJvci50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIG5vUHJvamVjdE5hbWVFcnJvcnMgPSB0cnVlO1xuICAgIH07XG4gICAgaWYgKG5vUHJvamVjdE5hbWVFcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59O1xuXG5jb25zdCB2YWxpZGF0ZVRhc2tGb3JtID0gKCkgPT4ge1xuICAgIGNvbnN0IHRhc2tOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrXCIpLnZhbHVlO1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0XCIpLnZhbHVlO1xuICAgIGxldCB0YXNrRXJyb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stZXJyb3JcIik7XG4gICAgbGV0IHByb2plY3RFcnJvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1lcnJvclwiKTtcbiAgICBsZXQgbm9Qcm9qZWN0RXJyb3JzID0gdHJ1ZTtcbiAgICBsZXQgbm9UYXNrRXJyb3JzID0gdHJ1ZTtcbiAgICBpZiAodGFza05hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgdGFza0Vycm9yLnRleHRDb250ZW50ID0gXCJQbGVhc2UgZW50ZXIgYSB0YXNrIG5hbWUuXCI7XG4gICAgICAgIG5vVGFza0Vycm9ycyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhc2tFcnJvci50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIG5vVGFza0Vycm9ycyA9IHRydWU7XG4gICAgfTtcbiAgICBpZiAocHJvamVjdE5hbWUgPT09IFwiXCIgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0XCIpLmZpcnN0Q2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgcHJvamVjdEVycm9yLnRleHRDb250ZW50ID0gXCJQbGVhc2UgY3JlYXRlIGEgcHJvamVjdCBiZWZvcmUgYWRkaW5nIGEgdGFzay5cIjtcbiAgICAgICAgbm9Qcm9qZWN0RXJyb3JzID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvamVjdEVycm9yLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgbm9Qcm9qZWN0RXJyb3JzID0gdHJ1ZTtcbiAgICB9O1xuICAgIGlmIChub1Byb2plY3RFcnJvcnMgJiYgbm9UYXNrRXJyb3JzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufTtcblxuY29uc3QgY2xlYXJFcnJvck1lc3NhZ2VzID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1lcnJvclwiKS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LWVycm9yXCIpLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbmFtZS1lcnJvclwiKS50ZXh0Q29udGVudCA9IFwiXCI7XG59O1xuXG5leHBvcnQge1xuICAgIHZhbGlkYXRlUHJvamVjdEZvcm0sXG4gICAgdmFsaWRhdGVUYXNrRm9ybSxcbiAgICBjbGVhckVycm9yTWVzc2FnZXNcbn07IiwiY2xhc3MgU3RvcmFnZSB7XG4gICAgc3RhdGljIHNhdmVEYXRhKGRhdGEpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0TGlzdFwiLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICB9O1xuICAgIHN0YXRpYyBnZXREYXRhKCkge1xuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwcm9qZWN0TGlzdFwiKSk7XG4gICAgICAgIHJldHVybiBwcm9qZWN0TGlzdDtcbiAgICB9O1xuICAgIHN0YXRpYyBkdW1teUNoZWNrKCkge1xuICAgICAgICBpZiAoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInByb2plY3RMaXN0XCIpKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0TGlzdFwiLCBKU09OLnN0cmluZ2lmeShkdW1teUNvbnRlbnQpKTtcbiAgICAgICAgfTtcbiAgICB9O1xufTtcblxubGV0IGR1bW15Q29udGVudCA9IFtcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJHeW1cIixcbiAgICAgIFwiY29sb3JcIjogXCIjZWYyOTI5XCIsXG4gICAgICBcInRhc2tzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1heCBkYXlcIixcbiAgICAgICAgICBcImRhdGVcIjogXCIyMDIyLTA1LTA2XCIsXG4gICAgICAgICAgXCJkb25lXCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJTcXVhdCAxODBrZ1wiLFxuICAgICAgICAgIFwiZGF0ZVwiOiBcIlwiLFxuICAgICAgICAgIFwiZG9uZVwiOiBmYWxzZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJXb3JrXCIsXG4gICAgICBcImNvbG9yXCI6IFwiI2ZjZTk0ZlwiLFxuICAgICAgXCJ0YXNrc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJUZWFtIG1lZXRpbmdcIixcbiAgICAgICAgICBcImRhdGVcIjogXCIyMDIyLTA1LTE5XCIsXG4gICAgICAgICAgXCJkb25lXCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJOZXcgcHJvamVjdCBwcmVzZW50YXRpb25cIixcbiAgICAgICAgICBcImRhdGVcIjogXCIyMDIyLTA1LTMxXCIsXG4gICAgICAgICAgXCJkb25lXCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNYWRlbGVpbmUncyBiZGF5XCIsXG4gICAgICAgICAgXCJkYXRlXCI6IFwiMjAyMi0wOC0xN1wiLFxuICAgICAgICAgIFwiZG9uZVwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiR2V0IGNvb2tpZXMgZm9yIHRoZSB0ZWFtXCIsXG4gICAgICAgICAgXCJkYXRlXCI6IFwiMjAyMi0wNC0wNlwiLFxuICAgICAgICAgIFwiZG9uZVwiOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIkNob3Jlc1wiLFxuICAgICAgXCJjb2xvclwiOiBcIiMyMDRhODdcIixcbiAgICAgIFwidGFza3NcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV2FzaCB0aGUgY2FyXCIsXG4gICAgICAgICAgXCJkYXRlXCI6IFwiXCIsXG4gICAgICAgICAgXCJkb25lXCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJCYXR0ZXJpZXMgZm9yIHRoZSByZW1vdGVcIixcbiAgICAgICAgICBcImRhdGVcIjogXCJcIixcbiAgICAgICAgICBcImRvbmVcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTmV3IGxpZ2h0YnVsYiBmb3IgdGhlIGJhdGhyb29tXCIsXG4gICAgICAgICAgXCJkYXRlXCI6IFwiXCIsXG4gICAgICAgICAgXCJkb25lXCI6IHRydWVcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgXTtcblxuZXhwb3J0IHtTdG9yYWdlfTsiLCIvKipcbiAqIERheXMgaW4gMSB3ZWVrLlxuICpcbiAqIEBuYW1lIGRheXNJbldlZWtcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgZGF5c0luV2VlayA9IDc7XG4vKipcbiAqIE1heGltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBuYW1lIG1heFRpbWVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtYXhUaW1lID0gTWF0aC5wb3coMTAsIDgpICogMjQgKiA2MCAqIDYwICogMTAwMDtcbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgbWludXRlXG4gKlxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaWxsaXNlY29uZHNJbk1pbnV0ZSA9IDYwMDAwO1xuLyoqXG4gKiBNaWxsaXNlY29uZHMgaW4gMSBob3VyXG4gKlxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5Ib3VyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5Ib3VyID0gMzYwMDAwMDtcbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgc2Vjb25kXG4gKlxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5TZWNvbmRcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaWxsaXNlY29uZHNJblNlY29uZCA9IDEwMDA7XG4vKipcbiAqIE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaW5UaW1lID0gLW1heFRpbWU7XG4vKipcbiAqIE1pbnV0ZXMgaW4gMSBob3VyXG4gKlxuICogQG5hbWUgbWludXRlc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbnV0ZXNJbkhvdXIgPSA2MDtcbi8qKlxuICogTW9udGhzIGluIDEgcXVhcnRlclxuICpcbiAqIEBuYW1lIG1vbnRoc0luUXVhcnRlclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1vbnRoc0luUXVhcnRlciA9IDM7XG4vKipcbiAqIE1vbnRocyBpbiAxIHllYXJcbiAqXG4gKiBAbmFtZSBtb250aHNJblllYXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtb250aHNJblllYXIgPSAxMjtcbi8qKlxuICogUXVhcnRlcnMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBxdWFydGVyc0luWWVhciA9IDQ7XG4vKipcbiAqIFNlY29uZHMgaW4gMSBob3VyXG4gKlxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbkhvdXIgPSAzNjAwO1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgbWludXRlXG4gKlxuICogQG5hbWUgc2Vjb25kc0luTWludXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luTWludXRlID0gNjA7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgeyBtaWxsaXNlY29uZHNJbkhvdXIsIG1pbGxpc2Vjb25kc0luTWludXRlIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHBhcnNlSVNPXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFBhcnNlIElTTyBzdHJpbmdcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBhcnNlIHRoZSBnaXZlbiBzdHJpbmcgaW4gSVNPIDg2MDEgZm9ybWF0IGFuZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cbiAqIElTTyA4NjAxOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzbid0IGEgc3RyaW5nLCB0aGUgZnVuY3Rpb24gY2Fubm90IHBhcnNlIHRoZSBzdHJpbmcgb3JcbiAqIHRoZSB2YWx1ZXMgYXJlIGludmFsaWQsIGl0IHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgcHJldmlvdXMgYHBhcnNlYCBpbXBsZW1lbnRhdGlvbiB3YXMgcmVuYW1lZCB0byBgcGFyc2VJU09gLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIHBhcnNlKCcyMDE2LTAxLTAxJylcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgcGFyc2VJU08oJzIwMTYtMDEtMDEnKVxuICogICBgYGBcbiAqXG4gKiAtIGBwYXJzZUlTT2Agbm93IHZhbGlkYXRlcyBzZXBhcmF0ZSBkYXRlIGFuZCB0aW1lIHZhbHVlcyBpbiBJU08tODYwMSBzdHJpbmdzXG4gKiAgIGFuZCByZXR1cm5zIGBJbnZhbGlkIERhdGVgIGlmIHRoZSBkYXRlIGlzIGludmFsaWQuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIHBhcnNlSVNPKCcyMDE4LTEzLTMyJylcbiAqICAgLy89PiBJbnZhbGlkIERhdGVcbiAqICAgYGBgXG4gKlxuICogLSBgcGFyc2VJU09gIG5vdyBkb2Vzbid0IGZhbGwgYmFjayB0byBgbmV3IERhdGVgIGNvbnN0cnVjdG9yXG4gKiAgIGlmIGl0IGZhaWxzIHRvIHBhcnNlIGEgc3RyaW5nIGFyZ3VtZW50LiBJbnN0ZWFkLCBpdCByZXR1cm5zIGBJbnZhbGlkIERhdGVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7MHwxfDJ9IFtvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHM9Ml0gLSB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNgIG11c3QgYmUgMCwgMSBvciAyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcyMDE0LTAyLTExVDExOjMwOjMwJyB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJyswMjAxNDEwMScgdG8gZGF0ZSxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiBjb25zdCByZXN1bHQgPSBwYXJzZUlTTygnKzAyMDE0MTAxJywgeyBhZGRpdGlvbmFsRGlnaXRzOiAxIH0pXG4gKiAvLz0+IEZyaSBBcHIgMTEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSVNPKGFyZ3VtZW50LCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgYWRkaXRpb25hbERpZ2l0cyA9IG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cyA9PSBudWxsID8gMiA6IHRvSW50ZWdlcihvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMpO1xuXG4gIGlmIChhZGRpdGlvbmFsRGlnaXRzICE9PSAyICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDEgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhZGRpdGlvbmFsRGlnaXRzIG11c3QgYmUgMCwgMSBvciAyJyk7XG4gIH1cblxuICBpZiAoISh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIGRhdGVTdHJpbmdzID0gc3BsaXREYXRlU3RyaW5nKGFyZ3VtZW50KTtcbiAgdmFyIGRhdGU7XG5cbiAgaWYgKGRhdGVTdHJpbmdzLmRhdGUpIHtcbiAgICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpO1xuICAgIGRhdGUgPSBwYXJzZURhdGUocGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nLCBwYXJzZVllYXJSZXN1bHQueWVhcik7XG4gIH1cblxuICBpZiAoIWRhdGUgfHwgaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciB0aW1lID0gMDtcbiAgdmFyIG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG5cbiAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRlU3RyaW5ncy50aW1lem9uZSkge1xuICAgIG9mZnNldCA9IHBhcnNlVGltZXpvbmUoZGF0ZVN0cmluZ3MudGltZXpvbmUpO1xuXG4gICAgaWYgKGlzTmFOKG9mZnNldCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlydHlEYXRlID0gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSk7IC8vIGpzIHBhcnNlZCBzdHJpbmcgYXNzdW1pbmcgaXQncyBpbiBVVEMgdGltZXpvbmVcbiAgICAvLyBidXQgd2UgbmVlZCBpdCB0byBiZSBwYXJzZWQgaW4gb3VyIHRpbWV6b25lXG4gICAgLy8gc28gd2UgdXNlIHV0YyB2YWx1ZXMgdG8gYnVpbGQgZGF0ZSBpbiBvdXIgdGltZXpvbmUuXG4gICAgLy8gWWVhciB2YWx1ZXMgZnJvbSAwIHRvIDk5IG1hcCB0byB0aGUgeWVhcnMgMTkwMCB0byAxOTk5XG4gICAgLy8gc28gc2V0IHllYXIgZXhwbGljaXRseSB3aXRoIHNldEZ1bGxZZWFyLlxuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEYXRlKDApO1xuICAgIHJlc3VsdC5zZXRGdWxsWWVhcihkaXJ0eURhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGlydHlEYXRlLmdldFVUQ01vbnRoKCksIGRpcnR5RGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgIHJlc3VsdC5zZXRIb3VycyhkaXJ0eURhdGUuZ2V0VVRDSG91cnMoKSwgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSwgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSwgZGlydHlEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpO1xufVxudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcblxuZnVuY3Rpb24gc3BsaXREYXRlU3RyaW5nKGRhdGVTdHJpbmcpIHtcbiAgdmFyIGRhdGVTdHJpbmdzID0ge307XG4gIHZhciBhcnJheSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMuZGF0ZVRpbWVEZWxpbWl0ZXIpO1xuICB2YXIgdGltZVN0cmluZzsgLy8gVGhlIHJlZ2V4IG1hdGNoIHNob3VsZCBvbmx5IHJldHVybiBhdCBtYXhpbXVtIHR3byBhcnJheSBlbGVtZW50cy5cbiAgLy8gW2RhdGVdLCBbdGltZV0sIG9yIFtkYXRlLCB0aW1lXS5cblxuICBpZiAoYXJyYXkubGVuZ3RoID4gMikge1xuICAgIHJldHVybiBkYXRlU3RyaW5ncztcbiAgfVxuXG4gIGlmICgvOi8udGVzdChhcnJheVswXSkpIHtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMF07XG4gIH0gZWxzZSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGFycmF5WzBdO1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXTtcblxuICAgIGlmIChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlci50ZXN0KGRhdGVTdHJpbmdzLmRhdGUpKSB7XG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlcilbMF07XG4gICAgICB0aW1lU3RyaW5nID0gZGF0ZVN0cmluZy5zdWJzdHIoZGF0ZVN0cmluZ3MuZGF0ZS5sZW5ndGgsIGRhdGVTdHJpbmcubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGltZVN0cmluZykge1xuICAgIHZhciB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lLmV4ZWModGltZVN0cmluZyk7XG5cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nLnJlcGxhY2UodG9rZW5bMV0sICcnKTtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRlU3RyaW5ncztcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGRhdGVTdHJpbmcsIGFkZGl0aW9uYWxEaWdpdHMpIHtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXig/OihcXFxcZHs0fXxbKy1dXFxcXGR7JyArICg0ICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSl8KFxcXFxkezJ9fFsrLV1cXFxcZHsnICsgKDIgKyBhZGRpdGlvbmFsRGlnaXRzKSArICd9KSQpJyk7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2gocmVnZXgpOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiB7XG4gICAgeWVhcjogTmFOLFxuICAgIHJlc3REYXRlU3RyaW5nOiAnJ1xuICB9O1xuICB2YXIgeWVhciA9IGNhcHR1cmVzWzFdID8gcGFyc2VJbnQoY2FwdHVyZXNbMV0pIDogbnVsbDtcbiAgdmFyIGNlbnR1cnkgPSBjYXB0dXJlc1syXSA/IHBhcnNlSW50KGNhcHR1cmVzWzJdKSA6IG51bGw7IC8vIGVpdGhlciB5ZWFyIG9yIGNlbnR1cnkgaXMgbnVsbCwgbm90IGJvdGhcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT09IG51bGwgPyB5ZWFyIDogY2VudHVyeSAqIDEwMCxcbiAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZSgoY2FwdHVyZXNbMV0gfHwgY2FwdHVyZXNbMl0pLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKGRhdGVSZWdleCk7IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBzdHJpbmdcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIGlzV2Vla0RhdGUgPSAhIWNhcHR1cmVzWzRdO1xuICB2YXIgZGF5T2ZZZWFyID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1sxXSk7XG4gIHZhciBtb250aCA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMl0pIC0gMTtcbiAgdmFyIGRheSA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbM10pO1xuICB2YXIgd2VlayA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbNF0pO1xuICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s1XSkgLSAxO1xuXG4gIGlmIChpc1dlZWtEYXRlKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheU9mV2VlaykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWssIGRheU9mV2Vlayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcblxuICAgIGlmICghdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXkpIHx8ICF2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgTWF0aC5tYXgoZGF5T2ZZZWFyLCBkYXkpKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZURhdGVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHBhcnNlSW50KHZhbHVlKSA6IDE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XG4gIHZhciBjYXB0dXJlcyA9IHRpbWVTdHJpbmcubWF0Y2godGltZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIE5hTjsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcblxuICB2YXIgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzNdKTtcblxuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlICsgc2Vjb25kcyAqIDEwMDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgnLCcsICcuJykpIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmUodGltZXpvbmVTdHJpbmcpIHtcbiAgaWYgKHRpbWV6b25lU3RyaW5nID09PSAnWicpIHJldHVybiAwO1xuICB2YXIgY2FwdHVyZXMgPSB0aW1lem9uZVN0cmluZy5tYXRjaCh0aW1lem9uZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIDA7XG4gIHZhciBzaWduID0gY2FwdHVyZXNbMV0gPT09ICcrJyA/IC0xIDogMTtcbiAgdmFyIGhvdXJzID0gcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICB2YXIgbWludXRlcyA9IGNhcHR1cmVzWzNdICYmIHBhcnNlSW50KGNhcHR1cmVzWzNdKSB8fCAwO1xuXG4gIGlmICghdmFsaWRhdGVUaW1lem9uZShob3VycywgbWludXRlcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKiAoaG91cnMgKiBtaWxsaXNlY29uZHNJbkhvdXIgKyBtaW51dGVzICogbWlsbGlzZWNvbmRzSW5NaW51dGUpO1xufVxuXG5mdW5jdGlvbiBkYXlPZklTT1dlZWtZZWFyKGlzb1dlZWtZZWFyLCB3ZWVrLCBkYXkpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDc7XG4gIHZhciBkaWZmID0gKHdlZWsgLSAxKSAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4vLyBGZWJydWFyeSBpcyBudWxsIHRvIGhhbmRsZSB0aGUgbGVhcCB5ZWFyICh1c2luZyB8fClcblxuXG52YXIgZGF5c0luTW9udGhzID0gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXJJbmRleCh5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8IHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDA7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICByZXR1cm4gbW9udGggPj0gMCAmJiBtb250aCA8PSAxMSAmJiBkYXRlID49IDEgJiYgZGF0ZSA8PSAoZGF5c0luTW9udGhzW21vbnRoXSB8fCAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMjkgOiAyOCkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIHJldHVybiBkYXlPZlllYXIgPj0gMSAmJiBkYXlPZlllYXIgPD0gKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDM2NiA6IDM2NSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV2Vla0RhdGUoX3llYXIsIHdlZWssIGRheSkge1xuICByZXR1cm4gd2VlayA+PSAxICYmIHdlZWsgPD0gNTMgJiYgZGF5ID49IDAgJiYgZGF5IDw9IDY7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgPT09IDI0KSB7XG4gICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgJiYgc2Vjb25kcyA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiBzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8IDYwICYmIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDwgNjAgJiYgaG91cnMgPj0gMCAmJiBob3VycyA8IDI1O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWV6b25lKF9ob3VycywgbWludXRlcykge1xuICByZXR1cm4gbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPD0gNTk7XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY29tcGFyZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb25cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tcGFyZSAxMSBGZWJydWFyeSAxOTg3IGFuZCAxMCBKdWx5IDE5ODk6XG4gKiBjb25zdCByZXN1bHQgPSBjb21wYXJlQXNjKG5ldyBEYXRlKDE5ODcsIDEsIDExKSwgbmV3IERhdGUoMTk4OSwgNiwgMTApKVxuICogLy89PiAtMVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTb3J0IHRoZSBhcnJheSBvZiBkYXRlczpcbiAqIGNvbnN0IHJlc3VsdCA9IFtcbiAqICAgbmV3IERhdGUoMTk5NSwgNiwgMiksXG4gKiAgIG5ldyBEYXRlKDE5ODcsIDEsIDExKSxcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiBdLnNvcnQoY29tcGFyZUFzYylcbiAqIC8vPT4gW1xuICogLy8gICBXZWQgRmViIDExIDE5ODcgMDA6MDA6MDAsXG4gKiAvLyAgIE1vbiBKdWwgMTAgMTk4OSAwMDowMDowMCxcbiAqIC8vICAgU3VuIEp1bCAwMiAxOTk1IDAwOjAwOjAwXG4gKiAvLyBdXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFyZUFzYyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIGRpZmYgPSBkYXRlTGVmdC5nZXRUaW1lKCkgLSBkYXRlUmlnaHQuZ2V0VGltZSgpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxOyAvLyBSZXR1cm4gMCBpZiBkaWZmIGlzIDA7IHJldHVybiBOYU4gaWYgZGlmZiBpcyBOYU5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gLSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAtIDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGREYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gVGh1IFNlcCAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRGF5cyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIGRheXMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbW9udGhzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbnRocyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtb250aHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbW9udGhzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA1IG1vbnRocyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkTW9udGhzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCA1KVxuICogLy89PiBTdW4gRmViIDAxIDIwMTUgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNb250aHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBtb250aHMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICB2YXIgZGF5T2ZNb250aCA9IGRhdGUuZ2V0RGF0ZSgpOyAvLyBUaGUgSlMgRGF0ZSBvYmplY3Qgc3VwcG9ydHMgZGF0ZSBtYXRoIGJ5IGFjY2VwdGluZyBvdXQtb2YtYm91bmRzIHZhbHVlcyBmb3JcbiAgLy8gbW9udGgsIGRheSwgZXRjLiBGb3IgZXhhbXBsZSwgbmV3IERhdGUoMjAyMCwgMCwgMCkgcmV0dXJucyAzMSBEZWMgMjAxOSBhbmRcbiAgLy8gbmV3IERhdGUoMjAyMCwgMTMsIDEpIHJldHVybnMgMSBGZWIgMjAyMS4gIFRoaXMgaXMgKmFsbW9zdCogdGhlIGJlaGF2aW9yIHdlXG4gIC8vIHdhbnQgZXhjZXB0IHRoYXQgZGF0ZXMgd2lsbCB3cmFwIGFyb3VuZCB0aGUgZW5kIG9mIGEgbW9udGgsIG1lYW5pbmcgdGhhdFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMzEpIHdpbGwgcmV0dXJuIDMgTWFyIDIwMjEgbm90IDI4IEZlYiAyMDIxIGFzIGRlc2lyZWQuIFNvXG4gIC8vIHdlJ2xsIGRlZmF1bHQgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZCBtb250aCBieSBhZGRpbmcgMSB0byB0aGUgZGVzaXJlZFxuICAvLyBtb250aCBhbmQgdXNpbmcgYSBkYXRlIG9mIDAgdG8gYmFjayB1cCBvbmUgZGF5IHRvIHRoZSBlbmQgb2YgdGhlIGRlc2lyZWRcbiAgLy8gbW9udGguXG5cbiAgdmFyIGVuZE9mRGVzaXJlZE1vbnRoID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICBlbmRPZkRlc2lyZWRNb250aC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBhbW91bnQgKyAxLCAwKTtcbiAgdmFyIGRheXNJbk1vbnRoID0gZW5kT2ZEZXNpcmVkTW9udGguZ2V0RGF0ZSgpO1xuXG4gIGlmIChkYXlPZk1vbnRoID49IGRheXNJbk1vbnRoKSB7XG4gICAgLy8gSWYgd2UncmUgYWxyZWFkeSBhdCB0aGUgZW5kIG9mIHRoZSBtb250aCwgdGhlbiB0aGlzIGlzIHRoZSBjb3JyZWN0IGRhdGVcbiAgICAvLyBhbmQgd2UncmUgZG9uZS5cbiAgICByZXR1cm4gZW5kT2ZEZXNpcmVkTW9udGg7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCB3ZSBub3cga25vdyB0aGF0IHNldHRpbmcgdGhlIG9yaWdpbmFsIGRheS1vZi1tb250aCB2YWx1ZSB3b24ndFxuICAgIC8vIGNhdXNlIGFuIG92ZXJmbG93LCBzbyBzZXQgdGhlIGRlc2lyZWQgZGF5LW9mLW1vbnRoLiBOb3RlIHRoYXQgd2UgY2FuJ3RcbiAgICAvLyBqdXN0IHNldCB0aGUgZGF0ZSBvZiBgZW5kT2ZEZXNpcmVkTW9udGhgIGJlY2F1c2UgdGhhdCBvYmplY3QgbWF5IGhhdmUgaGFkXG4gICAgLy8gaXRzIHRpbWUgY2hhbmdlZCBpbiB0aGUgdW51c3VhbCBjYXNlIHdoZXJlIHdoZXJlIGEgRFNUIHRyYW5zaXRpb24gd2FzIG9uXG4gICAgLy8gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCBhbmQgaXRzIGxvY2FsIHRpbWUgd2FzIGluIHRoZSBob3VyIHNraXBwZWQgb3JcbiAgICAvLyByZXBlYXRlZCBuZXh0IHRvIGEgRFNUIHRyYW5zaXRpb24uICBTbyB3ZSB1c2UgYGRhdGVgIGluc3RlYWQgd2hpY2ggaXNcbiAgICAvLyBndWFyYW50ZWVkIHRvIHN0aWxsIGhhdmUgdGhlIG9yaWdpbmFsIHRpbWUuXG4gICAgZGF0ZS5zZXRGdWxsWWVhcihlbmRPZkRlc2lyZWRNb250aC5nZXRGdWxsWWVhcigpLCBlbmRPZkRlc2lyZWRNb250aC5nZXRNb250aCgpLCBkYXlPZk1vbnRoKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufSIsImltcG9ydCB7U3RvcmFnZX0gZnJvbSBcIi4vc3RvcmFnZS5qc1wiO1xuaW1wb3J0IHtUYXNrLCBQcm9qZWN0fSBmcm9tIFwiLi9mYWN0b3JpZXMuanNcIjtcblxuY29uc3QgcmVjb25zdHJ1Y3RlZFByb2plY3RMaXN0ID0gKCkgPT4ge1xuICAgIGxldCByZWNvbnN0cnVjdGVkID0gW107XG4gICAgbGV0IGZyb21TdG9yYWdlID0gU3RvcmFnZS5nZXREYXRhKCk7XG4gICAgZnJvbVN0b3JhZ2UuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xuICAgICAgICBsZXQgbmV3UHJvamVjdCA9IG5ldyBQcm9qZWN0KHByb2plY3QubmFtZSwgcHJvamVjdC5jb2xvcik7XG4gICAgICAgIGxldCB0YXNrTGlzdCA9IHByb2plY3QudGFza3M7XG4gICAgICAgIHRhc2tMaXN0LmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgICAgICAgIG5ld1Byb2plY3QuYWRkVGFzayhuZXcgVGFzayh0YXNrLm5hbWUsIHRhc2suZGF0ZSwgdGFzay5kb25lKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZWNvbnN0cnVjdGVkLnB1c2gobmV3UHJvamVjdCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlY29uc3RydWN0ZWQ7XG59O1xuXG5leHBvcnQge3JlY29uc3RydWN0ZWRQcm9qZWN0TGlzdH07IiwiaW1wb3J0IHtTdG9yYWdlfSBmcm9tIFwiLi9zdG9yYWdlLmpzXCI7XG5pbXBvcnQge2FkZCwgY29tcGFyZUFzYywgcGFyc2VJU099IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IHtyZWNvbnN0cnVjdGVkUHJvamVjdExpc3R9IGZyb20gXCIuL29iamVjdC1tZXRob2RzLmpzXCI7XG5pbXBvcnQge3Rhc2tFZGl0QnV0dG9uTGlzdGVuZXJzLCBwcm9qZWN0RWRpdE1vZGFsfSBmcm9tIFwiLi9tb2RhbC1jb250cm9scy5qc1wiO1xuXG5jb25zdCBhZGRQcm9qZWN0VG9VaSA9IChvYmopID0+IHtcbiAgICBsZXQgcGFyZW50TGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgcGFyZW50TGkuZGF0YXNldC5wcm9qZWN0ID0gb2JqLm5hbWU7XG4gICAgbGV0IG5hbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBsZXQgY29sb3JDaXJjbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG5hbWVDb250YWluZXIudGV4dENvbnRlbnQgPSBvYmoubmFtZTtcbiAgICBjb2xvckNpcmNsZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvYmouY29sb3I7XG4gICAgcGFyZW50TGkuYXBwZW5kQ2hpbGQoY29sb3JDaXJjbGUpO1xuICAgIHBhcmVudExpLmFwcGVuZENoaWxkKG5hbWVDb250YWluZXIpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdC1jb250YWluZXIgdWxcIikuYXBwZW5kQ2hpbGQocGFyZW50TGkpO1xufTtcblxuY29uc3QgYWRkQWxsUHJvamVjdHNUb1VpID0gKCkgPT4ge1xuICAgIGlmIChTdG9yYWdlLmdldERhdGEoKSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgcHJvamVjdEFycmF5ID0gU3RvcmFnZS5nZXREYXRhKCk7XG4gICAgICAgIHByb2plY3RBcnJheS5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICBhZGRQcm9qZWN0VG9VaShwcm9qZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5cbmNvbnN0IGFkZFRhc2t0b1VpID0gKG9iaiwgY29sb3IsIHByb2plY3RJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgbGV0IHBhcmVudExpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIHBhcmVudExpLmRhdGFzZXQucHJvamVjdEluZGV4ID0gcHJvamVjdEluZGV4O1xuICAgIHBhcmVudExpLmRhdGFzZXQudGFza0luZGV4ID0gdGFza0luZGV4O1xuICAgIGxldCBjb2xvckJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb2xvckJsb2NrLmNsYXNzTGlzdC5hZGQoXCJjb2xvci1ibG9ja1wiKTtcbiAgICBjb2xvckJsb2NrLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIGxldCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbnRhaW5lclwiKTtcbiAgICBsZXQgdGFza0FuZENoZWNrYm94RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrQW5kQ2hlY2tib3hEaXYuY2xhc3NMaXN0LmFkZChcInRhc2stYW5kLWNoZWNrYm94XCIpO1xuICAgIGxldCBjaGVja2JveERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY2hlY2tib3hEaXYuY2xhc3NMaXN0LmFkZChcImNoZWNrYm94XCIpO1xuICAgIGlmIChvYmouZG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjaGVja2JveERpdi5jbGFzc0xpc3QuYWRkKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgbGV0IGNoZWNrYm94SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgY2hlY2tib3hJbWcuc3JjID0gXCIuL2ltZy9jaGVjay5wbmdcIjtcbiAgICAgICAgY2hlY2tib3hEaXYuYXBwZW5kQ2hpbGQoY2hlY2tib3hJbWcpO1xuICAgIH07XG4gICAgbGV0IHRhc2tOYW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrTmFtZURpdi5jbGFzc0xpc3QuYWRkKFwidGFzay1uYW1lXCIpO1xuICAgIHRhc2tOYW1lRGl2LnRleHRDb250ZW50ID0gb2JqLm5hbWU7XG4gICAgbGV0IGRhdGVBbmRFZGl0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkYXRlQW5kRWRpdERpdi5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1hbmQtZWRpdFwiKTtcbiAgICBsZXQgZGF0ZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkYXRlXCIpO1xuICAgIGRhdGVEaXYuY2xhc3NMaXN0LmFkZChcImRhdGVcIik7XG4gICAgaWYgKG9iai5kYXRlID09PSBcIlwiKSB7XG4gICAgICAgIGRhdGVEaXYudGV4dENvbnRlbnQgPSBcIk5vIGR1ZSBkYXRlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZURpdi50ZXh0Q29udGVudCA9IG9iai5kYXRlO1xuICAgIH07XG4gICAgbGV0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBlZGl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWVkaXQtYnV0dG9uXCIpXG4gICAgbGV0IGVkaXRJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIGVkaXRJbWcuc3JjID0gXCIuL2ltZy9jcmVkaXQtY2FyZC1lZGl0LnBuZ1wiO1xuICAgIGxldCB0cmFzaEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGxldCB0cmFzaEltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgdHJhc2hJbWcuc3JjID0gXCIuL2ltZy9kZWxldGUucG5nXCI7XG4gICAgcGFyZW50TGkuYXBwZW5kQ2hpbGQoY29sb3JCbG9jayk7XG4gICAgcGFyZW50TGkuYXBwZW5kQ2hpbGQodGFza0NvbnRhaW5lcik7XG4gICAgdGFza0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrQW5kQ2hlY2tib3hEaXYpO1xuICAgIHRhc2tBbmRDaGVja2JveERpdi5hcHBlbmRDaGlsZChjaGVja2JveERpdik7XG4gICAgdGFza0FuZENoZWNrYm94RGl2LmFwcGVuZENoaWxkKHRhc2tOYW1lRGl2KTtcbiAgICB0YXNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGVBbmRFZGl0RGl2KTtcbiAgICBkYXRlQW5kRWRpdERpdi5hcHBlbmRDaGlsZChkYXRlRGl2KTtcbiAgICBlZGl0QnV0dG9uLmFwcGVuZENoaWxkKGVkaXRJbWcpO1xuICAgIHRyYXNoQnV0dG9uLmFwcGVuZENoaWxkKHRyYXNoSW1nKTtcbiAgICBkYXRlQW5kRWRpdERpdi5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcbiAgICBkYXRlQW5kRWRpdERpdi5hcHBlbmRDaGlsZCh0cmFzaEJ1dHRvbik7XG4gICAgaWYgKG9iai5kb25lKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYm90LWNvbnRlbnQtYmxvY2sgdWxcIikuYXBwZW5kKHBhcmVudExpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJvdC1jb250ZW50LWJsb2NrIHVsXCIpLnByZXBlbmQocGFyZW50TGkpO1xuXG4gICAgfTtcbn07XG5cbmNvbnN0IGFkZEFsbFRhc2tzVG9VaSA9ICgpID0+IHtcbiAgICBpZiAoU3RvcmFnZS5nZXREYXRhKCkgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IHByb2plY3RBcnJheSA9IFN0b3JhZ2UuZ2V0RGF0YSgpO1xuICAgICAgICBsZXQgcHJvamVjdEluZGV4ID0gMDtcbiAgICAgICAgcHJvamVjdEFycmF5LmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgICAgICAgIGxldCB0YXNrQ29sb3IgPSBwcm9qZWN0LmNvbG9yO1xuICAgICAgICAgICAgbGV0IHRhc2tJbmRleCA9IDA7XG4gICAgICAgICAgICBwcm9qZWN0LnRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgICAgICAgICAgICBhZGRUYXNrdG9VaSh0YXNrLCB0YXNrQ29sb3IsIHByb2plY3RJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICB0YXNrSW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJvamVjdEluZGV4Kys7XG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuXG5jb25zdCBhZGRUYXNrc0Zyb21Qcm9qZWN0ID0gKHByb2plY3ROYW1lKSA9PiB7XG4gICAgaWYgKFN0b3JhZ2UuZ2V0RGF0YSgpICE9PSBudWxsKSB7XG4gICAgICAgIGxldCBwcm9qZWN0QXJyYXkgPSBTdG9yYWdlLmdldERhdGEoKTtcbiAgICAgICAgbGV0IHByb2plY3RJbmRleCA9IDA7XG4gICAgICAgIHByb2plY3RBcnJheS5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgdGFza0luZGV4ID0gMDtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0Lm5hbWUgPT09IHByb2plY3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhc2tDb2xvciA9IHByb2plY3QuY29sb3I7XG4gICAgICAgICAgICAgICAgcHJvamVjdC50YXNrcy5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFRhc2t0b1VpKHRhc2ssIHRhc2tDb2xvciwgcHJvamVjdEluZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0YXNrSW5kZXgrKztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwcm9qZWN0SW5kZXgrKztcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5cbmNvbnN0IGFkZFRvZGF5c1Rhc2tzID0gKCkgPT4ge1xuICAgIGxldCB0b2RheSA9IHBhcnNlSVNPKG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdChcIlRcIilbMF0pO1xuICAgIGxldCBwcm9qZWN0QXJyYXkgPSBTdG9yYWdlLmdldERhdGEoKTtcbiAgICBsZXQgcHJvamVjdEluZGV4ID0gMDtcbiAgICBwcm9qZWN0QXJyYXkuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xuICAgICAgICBsZXQgdGFza0NvbG9yID0gcHJvamVjdC5jb2xvcjtcbiAgICAgICAgbGV0IHRhc2tJbmRleCA9IDA7XG4gICAgICAgIHByb2plY3QudGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbXBhcmVBc2MocGFyc2VJU08odGFzay5kYXRlKSwgdG9kYXkpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkVGFza3RvVWkodGFzaywgdGFza0NvbG9yLCBwcm9qZWN0SW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFza0luZGV4Kys7XG4gICAgICAgIH0pO1xuICAgICAgICBwcm9qZWN0SW5kZXgrKztcbiAgICB9KTtcbn07XG5cbmNvbnN0IGFkZFdlZWtzVGFza3MgPSAoKSA9PiB7XG4gICAgbGV0IHRvZGF5ID0gcGFyc2VJU08obmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KFwiVFwiKVswXSk7XG4gICAgbGV0IHdlZWtGcm9tTm93ID0gYWRkKHRvZGF5LCB7XG4gICAgICAgIGRheXM6IDdcbiAgICB9KTtcbiAgICBsZXQgcHJvamVjdEFycmF5ID0gU3RvcmFnZS5nZXREYXRhKCk7XG4gICAgbGV0IHByb2plY3RJbmRleCA9IDA7XG4gICAgcHJvamVjdEFycmF5LmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgICAgbGV0IHRhc2tDb2xvciA9IHByb2plY3QuY29sb3I7XG4gICAgICAgIGxldCB0YXNrSW5kZXggPSAwO1xuICAgICAgICBwcm9qZWN0LnRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgICAgICAgIGlmIChjb21wYXJlQXNjKHBhcnNlSVNPKHRhc2suZGF0ZSksIHdlZWtGcm9tTm93KSA9PT0gLTEgJiYgY29tcGFyZUFzYyhwYXJzZUlTTyh0YXNrLmRhdGUpLCB0b2RheSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYWRkVGFza3RvVWkodGFzaywgdGFza0NvbG9yLCBwcm9qZWN0SW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFza0luZGV4Kys7XG4gICAgICAgIH0pO1xuICAgICAgICBwcm9qZWN0SW5kZXgrKztcbiAgICB9KTtcbn07XG5cbmNvbnN0IGNsZWFyVGFza3MgPSAoKSA9PiB7XG4gICAgbGV0IHRhc2tzUGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ib3QtY29udGVudC1ibG9jayB1bFwiKTtcbiAgICB3aGlsZSAodGFza3NQYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICB0YXNrc1BhcmVudC5yZW1vdmVDaGlsZCh0YXNrc1BhcmVudC5sYXN0Q2hpbGQpO1xuICAgIH07XG59O1xuXG5jb25zdCBjbGVhclByb2plY3RzID0gKCkgPT4ge1xuICAgIGxldCBwcm9qZWN0c1BhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdC1jb250YWluZXIgdWxcIik7XG4gICAgd2hpbGUgKHByb2plY3RzUGFyZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgcHJvamVjdHNQYXJlbnQucmVtb3ZlQ2hpbGQocHJvamVjdHNQYXJlbnQubGFzdENoaWxkKTtcbiAgICB9O1xufTtcblxuY29uc3QgcmVmcmVzaFByb2plY3RzID0gKCkgPT4ge1xuICAgIGNsZWFyUHJvamVjdHMoKTtcbiAgICBhZGRBbGxQcm9qZWN0c1RvVWkoKTtcbiAgICBwcm9qZWN0TGlzdGVuZXJzKCk7XG59O1xuXG5jb25zdCByZWZyZXNoQ3VycmVudFRhc2tzID0gKCkgPT4ge1xuICAgIGxldCBjdXJyZW50VGFza0xpc3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5saXN0LW5hbWVcIikudGV4dENvbnRlbnQ7XG4gICAgc3dpdGNoIChjdXJyZW50VGFza0xpc3ROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJBTExcIjpcbiAgICAgICAgICAgIGNsZWFyVGFza3MoKTtcbiAgICAgICAgICAgIGFkZEFsbFRhc2tzVG9VaSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJUT0RBWVwiOlxuICAgICAgICAgICAgY2xlYXJUYXNrcygpO1xuICAgICAgICAgICAgYWRkVG9kYXlzVGFza3MoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiV0VFS1wiOlxuICAgICAgICAgICAgY2xlYXJUYXNrcygpO1xuICAgICAgICAgICAgYWRkV2Vla3NUYXNrcygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjbGVhclRhc2tzKCk7XG4gICAgICAgICAgICBhZGRUYXNrc0Zyb21Qcm9qZWN0KGN1cnJlbnRUYXNrTGlzdE5hbWUpO1xuICAgIH07XG4gICAgdGFza0J1dHRvbkxpc3RlbmVycygpO1xufTtcblxuY2xhc3MgSGVhZGVyRWRpdERlbGV0ZSB7XG4gICAgc3RhdGljIGFkZCgpIHtcbiAgICAgICAgbGV0IHBhcmVudENvbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpc3QtZWRpdC1kZWxldGVcIik7XG4gICAgICAgIGxldCBlZGl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGVkaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIkVkaXRcIjtcbiAgICAgICAgbGV0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0ZVwiO1xuICAgICAgICBwYXJlbnRDb250LmFwcGVuZChlZGl0QnV0dG9uKTtcbiAgICAgICAgcGFyZW50Q29udC5hcHBlbmQoZGVsZXRlQnV0dG9uKTtcbiAgICB9O1xuICAgIHN0YXRpYyBjbGVhcigpIHtcbiAgICAgICAgbGV0IHBhcmVudENvbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpc3QtZWRpdC1kZWxldGVcIik7XG4gICAgICAgIHdoaWxlIChwYXJlbnRDb250LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHBhcmVudENvbnQucmVtb3ZlQ2hpbGQocGFyZW50Q29udC5sYXN0Q2hpbGQpO1xuICAgICAgICB9O1xuICAgIH07XG59O1xuXG5jb25zdCBwcm9qZWN0RGVsZXRlQnV0dG9uID0gKCkgPT4ge1xuICAgIGxldCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9wLWNvbnRlbnQtYmxvY2sgaDJcIikudGV4dENvbnRlbnQ7XG4gICAgbGV0IHByb2plY3RBcnJheSA9IFN0b3JhZ2UuZ2V0RGF0YSgpO1xuICAgIGxldCBwcm9qZWN0SW5kZXggPSAwO1xuICAgIHByb2plY3RBcnJheS5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4gICAgICAgIGlmIChwcm9qZWN0Lm5hbWUgPT09IHByb2plY3ROYW1lKSB7XG4gICAgICAgICAgICBwcm9qZWN0QXJyYXkuc3BsaWNlKHByb2plY3RJbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgICAgIHByb2plY3RJbmRleCsrO1xuICAgIH0pO1xuICAgIFN0b3JhZ2Uuc2F2ZURhdGEocHJvamVjdEFycmF5KTtcbn07XG5cbmNvbnN0IHByb2plY3RFZGl0RGVsZXRlTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgIGxldCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5saXN0LWVkaXQtZGVsZXRlIHNwYW46Zmlyc3QtY2hpbGRcIik7XG4gICAgZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBwcm9qZWN0RWRpdE1vZGFsKCk7XG4gICAgfSk7XG4gICAgbGV0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGlzdC1lZGl0LWRlbGV0ZSBzcGFuOmxhc3QtY2hpbGRcIik7XG4gICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHByb2plY3REZWxldGVCdXR0b24oKTtcbiAgICAgICAgY2xlYXJUYXNrcygpO1xuICAgICAgICBsZXQgdGFza0xpc3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5saXN0LW5hbWVcIik7XG4gICAgICAgIHRhc2tMaXN0TmFtZS50ZXh0Q29udGVudCA9IFwiQUxMXCI7XG4gICAgICAgIGFkZEFsbFRhc2tzVG9VaSgpO1xuICAgICAgICB0YXNrQnV0dG9uTGlzdGVuZXJzKCk7XG4gICAgICAgIEhlYWRlckVkaXREZWxldGUuY2xlYXIoKTtcbiAgICAgICAgcmVmcmVzaFByb2plY3RzKCk7XG4gICAgfSk7XG59O1xuXG5jb25zdCBwcm9qZWN0TGlzdGVuZXJzID0gKCkgPT4ge1xuICAgIGxldCB0YXNrTGlzdE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpc3QtbmFtZVwiKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByb2plY3QtY29udGFpbmVyIHVsIGxpXCIpLmZvckVhY2goKHByb2plY3RDb250KSA9PiB7XG4gICAgICAgIHByb2plY3RDb250LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUYXNrcygpO1xuICAgICAgICAgICAgdGFza0xpc3ROYW1lLnRleHRDb250ZW50ID0gU3RyaW5nKGUudGFyZ2V0LmNsb3Nlc3QoXCJsaVwiKS5kYXRhc2V0LnByb2plY3QpO1xuICAgICAgICAgICAgYWRkVGFza3NGcm9tUHJvamVjdChlLnRhcmdldC5jbG9zZXN0KFwibGlcIikuZGF0YXNldC5wcm9qZWN0KTtcbiAgICAgICAgICAgIHRhc2tCdXR0b25MaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIEhlYWRlckVkaXREZWxldGUuY2xlYXIoKTtcbiAgICAgICAgICAgIEhlYWRlckVkaXREZWxldGUuYWRkKCk7XG4gICAgICAgICAgICBwcm9qZWN0RWRpdERlbGV0ZUxpc3RlbmVycygpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IGFsbFRvZGF5V2Vla0xpc3RlbmVycyA9ICgpID0+IHtcbiAgICBsZXQgdGFza0xpc3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5saXN0LW5hbWVcIik7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhbGwtdGFza3NcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY2xlYXJUYXNrcygpO1xuICAgICAgICB0YXNrTGlzdE5hbWUudGV4dENvbnRlbnQgPSBcIkFMTFwiO1xuICAgICAgICBhZGRBbGxUYXNrc1RvVWkoKTtcbiAgICAgICAgdGFza0J1dHRvbkxpc3RlbmVycygpO1xuICAgICAgICBIZWFkZXJFZGl0RGVsZXRlLmNsZWFyKCk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0b2RheS10YXNrc1wiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBjbGVhclRhc2tzKCk7XG4gICAgICAgIHRhc2tMaXN0TmFtZS50ZXh0Q29udGVudCA9IFwiVE9EQVlcIjtcbiAgICAgICAgYWRkVG9kYXlzVGFza3MoKTtcbiAgICAgICAgdGFza0J1dHRvbkxpc3RlbmVycygpO1xuICAgICAgICBIZWFkZXJFZGl0RGVsZXRlLmNsZWFyKCk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3ZWVrLXRhc2tzXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGFza3MoKTtcbiAgICAgICAgdGFza0xpc3ROYW1lLnRleHRDb250ZW50ID0gXCJXRUVLXCI7XG4gICAgICAgIGFkZFdlZWtzVGFza3MoKTtcbiAgICAgICAgdGFza0J1dHRvbkxpc3RlbmVycygpO1xuICAgICAgICBIZWFkZXJFZGl0RGVsZXRlLmNsZWFyKCk7XG4gICAgfSk7XG59O1xuXG5jb25zdCB0b2dnbGVEb25lTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2hlY2tib3hcIikuZm9yRWFjaCgoY2hlY2tib3gpID0+IHtcbiAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGVja2JveC5jbGFzc0xpc3QuY29udGFpbnMoXCJjaGVja2VkXCIpKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tib3gucmVtb3ZlQ2hpbGQoY2hlY2tib3gubGFzdENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrYm94SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgICAgICAgICBjaGVja2JveEltZy5zcmMgPSBcIi4vaW1nL2NoZWNrLnBuZ1wiO1xuICAgICAgICAgICAgICAgIGNoZWNrYm94LmFwcGVuZENoaWxkKGNoZWNrYm94SW1nKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgcmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheSA9IHJlY29uc3RydWN0ZWRQcm9qZWN0TGlzdCgpO1xuICAgICAgICAgICAgbGV0IHByb2plY3RJbmRleCA9IHBhcnNlSW50KGNoZWNrYm94LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmRhdGFzZXQucHJvamVjdEluZGV4KTtcbiAgICAgICAgICAgIGxldCB0YXNrSW5kZXggPSBwYXJzZUludChjaGVja2JveC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleCk7XG4gICAgICAgICAgICByZWNvbnN0cnVjdGVkUHJvamVjdEFycmF5W3Byb2plY3RJbmRleF0udGFza3NbdGFza0luZGV4XS50b2dnbGVEb25lKCk7XG4gICAgICAgICAgICBTdG9yYWdlLnNhdmVEYXRhKHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXkpO1xuICAgICAgICAgICAgY2hlY2tib3guY2xhc3NMaXN0LnRvZ2dsZShcImNoZWNrZWRcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuY29uc3QgZGVsZXRlQnV0dG9uTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGF0ZS1hbmQtZWRpdCBzcGFuOmxhc3QtY2hpbGRcIikuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXkgPSByZWNvbnN0cnVjdGVkUHJvamVjdExpc3QoKTtcbiAgICAgICAgICAgIGxldCBwcm9qZWN0SW5kZXggPSBwYXJzZUludChidXR0b24ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuZGF0YXNldC5wcm9qZWN0SW5kZXgpO1xuICAgICAgICAgICAgbGV0IHRhc2tJbmRleCA9IHBhcnNlSW50KGJ1dHRvbi5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleCk7XG4gICAgICAgICAgICByZWNvbnN0cnVjdGVkUHJvamVjdEFycmF5W3Byb2plY3RJbmRleF0udGFza3Muc3BsaWNlKHRhc2tJbmRleCwgMSk7XG4gICAgICAgICAgICBTdG9yYWdlLnNhdmVEYXRhKHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXkpO1xuICAgICAgICAgICAgcmVmcmVzaEN1cnJlbnRUYXNrcygpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IHRhc2tCdXR0b25MaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgdG9nZ2xlRG9uZUxpc3RlbmVycygpO1xuICAgIGRlbGV0ZUJ1dHRvbkxpc3RlbmVycygpO1xuICAgIHRhc2tFZGl0QnV0dG9uTGlzdGVuZXJzKCk7XG59O1xuXG5jb25zdCB1aUxpc3RlbmVycyA9ICgpID0+IHtcbiAgICBwcm9qZWN0TGlzdGVuZXJzKCk7XG4gICAgYWxsVG9kYXlXZWVrTGlzdGVuZXJzKCk7XG4gICAgdGFza0J1dHRvbkxpc3RlbmVycygpO1xuICAgIGRlbGV0ZUJ1dHRvbkxpc3RlbmVycygpO1xufTtcblxuZXhwb3J0IHthZGRBbGxUYXNrc1RvVWksIGFkZEFsbFByb2plY3RzVG9VaSwgdWlMaXN0ZW5lcnMsIHJlZnJlc2hQcm9qZWN0cywgcHJvamVjdExpc3RlbmVycywgcmVmcmVzaEN1cnJlbnRUYXNrc307IiwiaW1wb3J0IGFkZERheXMgZnJvbSBcIi4uL2FkZERheXMvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNb250aHMgZnJvbSBcIi4uL2FkZE1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAbmFtZSBhZGRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge0R1cmF0aW9ufSBkdXJhdGlvbiAtIHRoZSBvYmplY3Qgd2l0aCB5ZWFycywgbW9udGhzLCB3ZWVrcywgZGF5cywgaG91cnMsIG1pbnV0ZXMgYW5kIHNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqXG4gKiB8IEtleSAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHllYXJzICAgICAgICAgIHwgQW1vdW50IG9mIHllYXJzIHRvIGJlIGFkZGVkICAgICAgICB8XG4gKiB8IG1vbnRocyAgICAgICAgIHwgQW1vdW50IG9mIG1vbnRocyB0byBiZSBhZGRlZCAgICAgICB8XG4gKiB8IHdlZWtzICAgICAgICAgIHwgQW1vdW50IG9mIHdlZWtzIHRvIGJlIGFkZGVkICAgICAgICB8XG4gKiB8IGRheXMgICAgICAgICAgIHwgQW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQgICAgICAgICB8XG4gKiB8IGhvdXJzICAgICAgICAgIHwgQW1vdW50IG9mIGhvdXJzIHRvIGJlIGFkZGVkICAgICAgICB8XG4gKiB8IG1pbnV0ZXMgICAgICAgIHwgQW1vdW50IG9mIG1pbnV0ZXMgdG8gYmUgYWRkZWQgICAgICB8XG4gKiB8IHNlY29uZHMgICAgICAgIHwgQW1vdW50IG9mIHNlY29uZHMgdG8gYmUgYWRkZWQgICAgICB8XG4gKlxuICogQWxsIHZhbHVlcyBkZWZhdWx0IHRvIDBcbiAqXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIHRoZSBmb2xsb3dpbmcgZHVyYXRpb24gdG8gMSBTZXB0ZW1iZXIgMjAxNCwgMTA6MTk6NTBcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZChuZXcgRGF0ZSgyMDE0LCA4LCAxLCAxMCwgMTksIDUwKSwge1xuICogICB5ZWFyczogMixcbiAqICAgbW9udGhzOiA5LFxuICogICB3ZWVrczogMSxcbiAqICAgZGF5czogNyxcbiAqICAgaG91cnM6IDUsXG4gKiAgIG1pbnV0ZXM6IDksXG4gKiAgIHNlY29uZHM6IDMwLFxuICogfSlcbiAqIC8vPT4gVGh1IEp1biAxNSAyMDE3IDE1OjI5OjIwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZChkaXJ0eURhdGUsIGR1cmF0aW9uKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICBpZiAoIWR1cmF0aW9uIHx8IHR5cGVvZiBkdXJhdGlvbiAhPT0gJ29iamVjdCcpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgeWVhcnMgPSBkdXJhdGlvbi55ZWFycyA/IHRvSW50ZWdlcihkdXJhdGlvbi55ZWFycykgOiAwO1xuICB2YXIgbW9udGhzID0gZHVyYXRpb24ubW9udGhzID8gdG9JbnRlZ2VyKGR1cmF0aW9uLm1vbnRocykgOiAwO1xuICB2YXIgd2Vla3MgPSBkdXJhdGlvbi53ZWVrcyA/IHRvSW50ZWdlcihkdXJhdGlvbi53ZWVrcykgOiAwO1xuICB2YXIgZGF5cyA9IGR1cmF0aW9uLmRheXMgPyB0b0ludGVnZXIoZHVyYXRpb24uZGF5cykgOiAwO1xuICB2YXIgaG91cnMgPSBkdXJhdGlvbi5ob3VycyA/IHRvSW50ZWdlcihkdXJhdGlvbi5ob3VycykgOiAwO1xuICB2YXIgbWludXRlcyA9IGR1cmF0aW9uLm1pbnV0ZXMgPyB0b0ludGVnZXIoZHVyYXRpb24ubWludXRlcykgOiAwO1xuICB2YXIgc2Vjb25kcyA9IGR1cmF0aW9uLnNlY29uZHMgPyB0b0ludGVnZXIoZHVyYXRpb24uc2Vjb25kcykgOiAwOyAvLyBBZGQgeWVhcnMgYW5kIG1vbnRoc1xuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlV2l0aE1vbnRocyA9IG1vbnRocyB8fCB5ZWFycyA/IGFkZE1vbnRocyhkYXRlLCBtb250aHMgKyB5ZWFycyAqIDEyKSA6IGRhdGU7IC8vIEFkZCB3ZWVrcyBhbmQgZGF5c1xuXG4gIHZhciBkYXRlV2l0aERheXMgPSBkYXlzIHx8IHdlZWtzID8gYWRkRGF5cyhkYXRlV2l0aE1vbnRocywgZGF5cyArIHdlZWtzICogNykgOiBkYXRlV2l0aE1vbnRoczsgLy8gQWRkIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzXG5cbiAgdmFyIG1pbnV0ZXNUb0FkZCA9IG1pbnV0ZXMgKyBob3VycyAqIDYwO1xuICB2YXIgc2Vjb25kc1RvQWRkID0gc2Vjb25kcyArIG1pbnV0ZXNUb0FkZCAqIDYwO1xuICB2YXIgbXNUb0FkZCA9IHNlY29uZHNUb0FkZCAqIDEwMDA7XG4gIHZhciBmaW5hbERhdGUgPSBuZXcgRGF0ZShkYXRlV2l0aERheXMuZ2V0VGltZSgpICsgbXNUb0FkZCk7XG4gIHJldHVybiBmaW5hbERhdGU7XG59IiwiaW1wb3J0IHtUYXNrLCBQcm9qZWN0fSBmcm9tIFwiLi9mYWN0b3JpZXMuanNcIjtcbmltcG9ydCB7dmFsaWRhdGVQcm9qZWN0Rm9ybSwgdmFsaWRhdGVUYXNrRm9ybSwgY2xlYXJFcnJvck1lc3NhZ2VzfSBmcm9tIFwiLi9mb3JtLXZhbGlkYXRvcnMuanNcIjtcbmltcG9ydCB7U3RvcmFnZX0gZnJvbSBcIi4vc3RvcmFnZS5qc1wiO1xuaW1wb3J0IHtyZWZyZXNoUHJvamVjdHMsIHJlZnJlc2hDdXJyZW50VGFza3N9IGZyb20gXCIuL3VpLmpzXCI7XG5pbXBvcnQge3JlY29uc3RydWN0ZWRQcm9qZWN0TGlzdH0gZnJvbSBcIi4vb2JqZWN0LW1ldGhvZHMuanNcIjtcblxuY29uc3QgY2xvc2VQcm9qZWN0TW9kYWwgPSAoKSA9PiB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBsZXQgbW9kYWxIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbW9kYWwgLm1vZGFsLXRvcCBzcGFuOmZpcnN0LWNoaWxkXCIpO1xuICAgIG1vZGFsSGVhZGVyLnRleHRDb250ZW50ID0gXCJBREQgUFJPSkVDVFwiO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1mb3JtLXN1Ym1pdFwiKS50ZXh0Q29udGVudCA9IFwiQWRkIFByb2plY3RcIjtcbn07XG5jb25zdCBvcGVuUHJvamVjdE1vZGFsID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1mb3JtXCIpLnJlc2V0KCk7XG4gICAgY2xlYXJFcnJvck1lc3NhZ2VzKCk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG59O1xuY29uc3QgY2xvc2VUYXNrTW9kYWwgPSAoKSA9PiB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBkZWxldGUgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLW1vZGFsIC5tb2RhbC10b3Agc3BhbjpmaXJzdC1jaGlsZFwiKS5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICBkZWxldGUgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLW1vZGFsIC5tb2RhbC10b3Agc3BhbjpmaXJzdC1jaGlsZFwiKS5kYXRhc2V0LnByb2plY3RJbmRleDtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stbW9kYWwgLm1vZGFsLXRvcCBzcGFuOmZpcnN0LWNoaWxkXCIpLnRleHRDb250ZW50ID0gXCJBREQgVEFTS1wiO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1mb3JtLXN1Ym1pdFwiKS50ZXh0Q29udGVudCA9IFwiQWRkIFRhc2tcIjtcbn07XG5jb25zdCBvcGVuVGFza01vZGFsID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1mb3JtXCIpLnJlc2V0KCk7XG4gICAgY2xlYXJFcnJvck1lc3NhZ2VzKCk7XG4gICAgY2xlYXJGb3JtT3B0aW9ucygpO1xuICAgIHByb2plY3RzVG9Gb3JtT3B0aW9ucygpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1tb2RhbFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xufTtcbmNvbnN0IG1vZGFsVG9Qcm9qZWN0ID0gKCkgPT4ge1xuICAgIGxldCBuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpLnZhbHVlO1xuICAgIGxldCBjb2xvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29sb3JcIikudmFsdWU7XG4gICAgcmV0dXJuIG5ldyBQcm9qZWN0KG5hbWUsIGNvbG9yKTtcbn07XG5jb25zdCBwcm9qZWN0VG9BcnJheSA9ICgpID0+IHtcbiAgICBsZXQgbmV3UHJvamVjdCA9IG1vZGFsVG9Qcm9qZWN0KCk7XG4gICAgaWYgKFN0b3JhZ2UuZ2V0RGF0YSgpID09PSBudWxsKSB7XG4gICAgICAgIGxldCBwcm9qZWN0QXJyYXkgPSBbXTtcbiAgICAgICAgcHJvamVjdEFycmF5LnB1c2gobmV3UHJvamVjdCk7XG4gICAgICAgIFN0b3JhZ2Uuc2F2ZURhdGEocHJvamVjdEFycmF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJvamVjdEFycmF5ID0gU3RvcmFnZS5nZXREYXRhKCk7XG4gICAgICAgIHByb2plY3RBcnJheS5wdXNoKG5ld1Byb2plY3QpO1xuICAgICAgICBTdG9yYWdlLnNhdmVEYXRhKHByb2plY3RBcnJheSk7XG4gICAgfVxufTtcblxuY29uc3QgcHJvamVjdEZvcm1TdWJtaXQgPSAoKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRlUHJvamVjdEZvcm0oKSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LW1vZGFsIC5tb2RhbC10b3Agc3BhbjpmaXJzdC1jaGlsZFwiKS50ZXh0Q29udGVudCA9PT0gXCJFRElUIFBST0pFQ1RcIikge1xuICAgICAgICAgICAgcHJvamVjdEVkaXRTdWJtaXQoKTtcbiAgICAgICAgICAgIHJlZnJlc2hQcm9qZWN0cygpO1xuICAgICAgICAgICAgcmVmcmVzaEN1cnJlbnRUYXNrcygpO1xuICAgICAgICAgICAgY2xvc2VQcm9qZWN0TW9kYWwoKTtcbiAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgcHJvamVjdFRvQXJyYXkoKTtcbiAgICAgICAgICAgIHJlZnJlc2hQcm9qZWN0cygpO1xuICAgICAgICAgICAgY2xvc2VQcm9qZWN0TW9kYWwoKTtcbiAgICAgICAgfTtcbiAgICB9O1xufTtcblxuY29uc3QgbW9kYWxUb1Rhc2sgPSAoKSA9PiB7XG4gICAgbGV0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrXCIpLnZhbHVlO1xuICAgIGxldCBkdWVEYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkdWVEYXRlXCIpLnZhbHVlO1xuICAgIHJldHVybiBuZXcgVGFzayh0aXRsZSwgZHVlRGF0ZSk7XG59O1xuY29uc3QgdGFza1RvQXJyYXkgPSAoKSA9PiB7XG4gICAgbGV0IG5ld1Rhc2sgPSBtb2RhbFRvVGFzaygpO1xuICAgIGxldCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdFwiKS52YWx1ZTtcbiAgICBsZXQgcHJvamVjdEFycmF5ID0gU3RvcmFnZS5nZXREYXRhKCk7XG4gICAgcHJvamVjdEFycmF5LmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgICAgaWYgKHByb2plY3QubmFtZSA9PT0gcHJvamVjdE5hbWUpIHtcbiAgICAgICAgICAgIHByb2plY3QudGFza3MucHVzaChuZXdUYXNrKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBTdG9yYWdlLnNhdmVEYXRhKHByb2plY3RBcnJheSk7XG59O1xuY29uc3QgdGFza0Zvcm1TdWJtaXQgPSAoKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRlVGFza0Zvcm0oKSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLW1vZGFsIC5tb2RhbC10b3Agc3BhbjpmaXJzdC1jaGlsZFwiKS50ZXh0Q29udGVudCA9PT0gXCJFRElUIFRBU0tcIikge1xuICAgICAgICAgICAgdGFza0VkaXRTdWJtaXQoKTtcbiAgICAgICAgICAgIGNsb3NlVGFza01vZGFsKCk7XG4gICAgICAgICAgICByZWZyZXNoQ3VycmVudFRhc2tzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXNrVG9BcnJheSgpO1xuICAgICAgICAgICAgY2xvc2VUYXNrTW9kYWwoKTtcbiAgICAgICAgICAgIHJlZnJlc2hDdXJyZW50VGFza3MoKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5jb25zdCBjbGVhckZvcm1PcHRpb25zID0gKCkgPT4ge1xuICAgIGxldCBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3RcIik7XG4gICAgd2hpbGUgKHBhcmVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChwYXJlbnQubGFzdENoaWxkKTtcbiAgICB9O1xufTtcbmNvbnN0IHByb2plY3RzVG9Gb3JtT3B0aW9ucyA9ICgpID0+IHtcbiAgICBsZXQgc2VsZWN0UGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0XCIpO1xuICAgIGlmIChTdG9yYWdlLmdldERhdGEoKSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgcHJvamVjdEFycmF5ID0gU3RvcmFnZS5nZXREYXRhKCk7XG4gICAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0QXJyYXkpIHtcbiAgICAgICAgICAgIGxldCBuZXdPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgbmV3T3B0aW9uLnZhbHVlID0gcHJvamVjdC5uYW1lO1xuICAgICAgICAgICAgbmV3T3B0aW9uLnRleHQgPSBwcm9qZWN0Lm5hbWU7XG4gICAgICAgICAgICBzZWxlY3RQYXJlbnQuYXBwZW5kQ2hpbGQobmV3T3B0aW9uKTtcbiAgICAgICAgfTtcbiAgICB9O1xufTtcblxuY29uc3QgcHJvamVjdEVkaXRNb2RhbCA9ICgpID0+IHtcbiAgICBsZXQgcHJvamVjdE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvcC1jb250ZW50LWJsb2NrIGgyXCIpLnRleHRDb250ZW50O1xuICAgIGxldCBwcm9qZWN0QXJyYXkgPSBTdG9yYWdlLmdldERhdGEoKTtcbiAgICBsZXQgcHJvamVjdEluZGV4ID0gMDtcbiAgICBwcm9qZWN0QXJyYXkuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xuICAgICAgICBpZiAocHJvamVjdC5uYW1lID09PSBwcm9qZWN0TmFtZSkge1xuICAgICAgICAgICAgb3BlblByb2plY3RNb2RhbCgpO1xuICAgICAgICAgICAgbGV0IG1vZGFsSGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LW1vZGFsIC5tb2RhbC10b3Agc3BhbjpmaXJzdC1jaGlsZFwiKTtcbiAgICAgICAgICAgIG1vZGFsSGVhZGVyLnRleHRDb250ZW50ID0gXCJFRElUIFBST0pFQ1RcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1mb3JtLXN1Ym1pdFwiKS50ZXh0Q29udGVudCA9IFwiRWRpdCBQcm9qZWN0XCI7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmFtZVwiKTtcbiAgICAgICAgICAgIGxldCBjb2xvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29sb3JcIik7XG4gICAgICAgICAgICBuYW1lLnZhbHVlID0gcHJvamVjdE5hbWU7XG4gICAgICAgICAgICBjb2xvci52YWx1ZSA9IHByb2plY3QuY29sb3I7XG4gICAgICAgICAgICBtb2RhbEhlYWRlci5kYXRhc2V0LnByb2plY3RJbmRleCA9IHByb2plY3RJbmRleDtcbiAgICAgICAgfTtcbiAgICAgICAgcHJvamVjdEluZGV4Kys7XG4gICAgfSk7XG59O1xuXG5jb25zdCBwcm9qZWN0RWRpdFN1Ym1pdCA9ICgpID0+IHtcbiAgICBsZXQgcmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheSA9IHJlY29uc3RydWN0ZWRQcm9qZWN0TGlzdCgpO1xuICAgIGxldCBuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpO1xuICAgIGxldCBjb2xvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29sb3JcIik7XG4gICAgbGV0IHByb2plY3RJbmRleCA9IHBhcnNlSW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1tb2RhbCAubW9kYWwtdG9wIHNwYW46Zmlyc3QtY2hpbGRcIikuZGF0YXNldC5wcm9qZWN0SW5kZXgpO1xuICAgIHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS5uZXdOYW1lKG5hbWUudmFsdWUpO1xuICAgIHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS5uZXdDb2xvcihjb2xvci52YWx1ZSk7XG4gICAgbGV0IHRhc2tMaXN0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpc3QtbmFtZVwiKTtcbiAgICB0YXNrTGlzdFRpdGxlLnRleHRDb250ZW50ID0gbmFtZS52YWx1ZTtcbiAgICBTdG9yYWdlLnNhdmVEYXRhKHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXkpO1xuICAgIGRlbGV0ZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbW9kYWwgLm1vZGFsLXRvcCBzcGFuOmZpcnN0LWNoaWxkXCIpLmRhdGFzZXQucHJvamVjdEluZGV4O1xufTtcblxuY29uc3QgdGFza0VkaXRCdXR0b25MaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YXNrLWVkaXQtYnV0dG9uXCIpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIG9wZW5UYXNrTW9kYWwoKTtcbiAgICAgICAgICAgIGxldCBtb2RhbEhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1tb2RhbCAubW9kYWwtdG9wIHNwYW46Zmlyc3QtY2hpbGRcIik7XG4gICAgICAgICAgICBtb2RhbEhlYWRlci50ZXh0Q29udGVudCA9IFwiRURJVCBUQVNLXCI7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stZm9ybS1zdWJtaXRcIikudGV4dENvbnRlbnQgPSBcIkVkaXQgVGFza1wiO1xuICAgICAgICAgICAgbGV0IHByb2plY3RBcnJheSA9IFN0b3JhZ2UuZ2V0RGF0YSgpO1xuICAgICAgICAgICAgbGV0IHByb2plY3RJbmRleCA9IHBhcnNlSW50KGJ1dHRvbi5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5kYXRhc2V0LnByb2plY3RJbmRleCk7XG4gICAgICAgICAgICBsZXQgdGFza0luZGV4ID0gcGFyc2VJbnQoYnV0dG9uLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmRhdGFzZXQudGFza0luZGV4KTtcbiAgICAgICAgICAgIG1vZGFsSGVhZGVyLmRhdGFzZXQucHJvamVjdEluZGV4ID0gcHJvamVjdEluZGV4O1xuICAgICAgICAgICAgbW9kYWxIZWFkZXIuZGF0YXNldC50YXNrSW5kZXggPSB0YXNrSW5kZXg7XG4gICAgICAgICAgICBsZXQgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2tcIik7XG4gICAgICAgICAgICBsZXQgZHVlRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHVlRGF0ZVwiKTtcbiAgICAgICAgICAgIGxldCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0XCIpO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRUYXNrID0gcHJvamVjdEFycmF5W3Byb2plY3RJbmRleF0udGFza3NbdGFza0luZGV4XTtcbiAgICAgICAgICAgIHRpdGxlLnZhbHVlID0gY3VycmVudFRhc2submFtZTtcbiAgICAgICAgICAgIHByb2plY3RTZWxlY3QudmFsdWUgPSBwcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS5uYW1lO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUYXNrLmRhdGUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBkdWVEYXRlLnZhbHVlID0gY3VycmVudFRhc2suZGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG5jb25zdCB0YXNrRWRpdFN1Ym1pdCA9ICgpID0+IHtcbiAgICBsZXQgcmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheSA9IHJlY29uc3RydWN0ZWRQcm9qZWN0TGlzdCgpO1xuICAgIGxldCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFza1wiKTtcbiAgICBsZXQgZHVlRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHVlRGF0ZVwiKTtcbiAgICBsZXQgcHJvamVjdFNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdFwiKTtcbiAgICBsZXQgcHJvamVjdEluZGV4ID0gcGFyc2VJbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLW1vZGFsIC5tb2RhbC10b3Agc3BhbjpmaXJzdC1jaGlsZFwiKS5kYXRhc2V0LnByb2plY3RJbmRleCk7XG4gICAgbGV0IHRhc2tJbmRleCA9IHBhcnNlSW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1tb2RhbCAubW9kYWwtdG9wIHNwYW46Zmlyc3QtY2hpbGRcIikuZGF0YXNldC50YXNrSW5kZXgpO1xuICAgIGlmKHByb2plY3RTZWxlY3QudmFsdWUgPT09IHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS5uYW1lKXtcbiAgICAgICAgcmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheVtwcm9qZWN0SW5kZXhdLnRhc2tzW3Rhc2tJbmRleF0ubmV3TmFtZSh0aXRsZS52YWx1ZSk7XG4gICAgICAgIHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS50YXNrc1t0YXNrSW5kZXhdLm5ld0RhdGUoZHVlRGF0ZS52YWx1ZSk7XG4gICAgICAgIFN0b3JhZ2Uuc2F2ZURhdGEocmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheVtwcm9qZWN0SW5kZXhdLnRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICAgICAgICBTdG9yYWdlLnNhdmVEYXRhKHJlY29uc3RydWN0ZWRQcm9qZWN0QXJyYXkpO1xuICAgICAgICB0YXNrVG9BcnJheSgpO1xuICAgIH07XG59O1xuXG5jb25zdCBwcm9qZWN0TW9kYWxTdWJtaXRMaXN0ZW5lciA9ICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtZm9ybVwiKS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcHJvamVjdEZvcm1TdWJtaXQoKTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IHRhc2tNb2RhbFN1Ym1pdExpc3RlbmVyID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1mb3JtXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0YXNrRm9ybVN1Ym1pdCgpO1xuICAgIH0pO1xufVxuXG5jb25zdCBtb2RhbExpc3RlbmVycyA9ICgpID0+IHtcbiAgICBwcm9qZWN0TW9kYWxTdWJtaXRMaXN0ZW5lcigpO1xuICAgIHRhc2tNb2RhbFN1Ym1pdExpc3RlbmVyKCk7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stbW9kYWwtY2xvc2VcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY2xvc2VUYXNrTW9kYWwoKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YXNrXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIG9wZW5UYXNrTW9kYWwoKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbW9kYWwtY2xvc2VcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY2xvc2VQcm9qZWN0TW9kYWwoKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC1wcm9qZWN0XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIG9wZW5Qcm9qZWN0TW9kYWwoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stbW9kYWxcIikpIHtcbiAgICAgICAgICAgIGNsb3NlVGFza01vZGFsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1tb2RhbFwiKSkge1xuICAgICAgICAgICAgY2xvc2VQcm9qZWN0TW9kYWwoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1mb3JtLXN1Ym1pdFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBwcm9qZWN0Rm9ybVN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1mb3JtLXN1Ym1pdFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0YXNrRm9ybVN1Ym1pdCgpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1mb3JtLWNhbmNlbFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjbG9zZVRhc2tNb2RhbCgpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1mb3JtLWNhbmNlbFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjbG9zZVByb2plY3RNb2RhbCgpO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IHttb2RhbExpc3RlbmVycywgdGFza0VkaXRCdXR0b25MaXN0ZW5lcnMsIHByb2plY3RFZGl0TW9kYWx9OyIsImltcG9ydCB7bW9kYWxMaXN0ZW5lcnN9IGZyb20gXCIuL21vZGFsLWNvbnRyb2xzLmpzXCI7XG5pbXBvcnQge2FkZEFsbFByb2plY3RzVG9VaSwgdWlMaXN0ZW5lcnMsIGFkZEFsbFRhc2tzVG9VaX0gZnJvbSBcIi4vdWkuanNcIjtcbmltcG9ydCB7U3RvcmFnZX0gZnJvbSBcIi4vc3RvcmFnZS5qc1wiO1xuXG5TdG9yYWdlLmR1bW15Q2hlY2soKTtcbm1vZGFsTGlzdGVuZXJzKCk7XG5hZGRBbGxUYXNrc1RvVWkoKTtcbmFkZEFsbFByb2plY3RzVG9VaSgpO1xudWlMaXN0ZW5lcnMoKTsiXSwibmFtZXMiOlsiUHJvamVjdCIsImNvbnN0cnVjdG9yIiwibmFtZSIsImNvbG9yIiwidGhpcyIsInRhc2tzIiwibmV3TmFtZSIsIm5ld0NvbG9yIiwiYWRkVGFzayIsInRhc2siLCJwdXNoIiwib3ZlcldyaXRlVGFza3MiLCJ0YXNrTGlzdCIsIlRhc2siLCJkYXRlIiwiZG9uZSIsIm5ld0RhdGUiLCJ0b2dnbGVEb25lIiwiY2xlYXJFcnJvck1lc3NhZ2VzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJTdG9yYWdlIiwic3RhdGljIiwiZGF0YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJnZXRJdGVtIiwiZHVtbXlDb250ZW50IiwiTWF0aCIsInBvdyIsIm1pbGxpc2Vjb25kc0luSG91ciIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsImxlbmd0aCIsIlR5cGVFcnJvciIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwiTmFOIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJjZWlsIiwiZmxvb3IiLCJwYXJzZUlTTyIsImFyZ3VtZW50IiwiZGlydHlPcHRpb25zIiwiYXJndW1lbnRzIiwib3B0aW9ucyIsImFkZGl0aW9uYWxEaWdpdHMiLCJSYW5nZUVycm9yIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiRGF0ZSIsImRhdGVTdHJpbmdzIiwic3BsaXREYXRlU3RyaW5nIiwicGFyc2VZZWFyUmVzdWx0IiwicGFyc2VZZWFyIiwicGFyc2VEYXRlIiwicmVzdERhdGVTdHJpbmciLCJ5ZWFyIiwiZ2V0VGltZSIsIm9mZnNldCIsInRpbWVzdGFtcCIsInRpbWUiLCJwYXJzZVRpbWUiLCJ0aW1lem9uZSIsImRpcnR5RGF0ZSIsInJlc3VsdCIsInNldEZ1bGxZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJzZXRIb3VycyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwYXJzZVRpbWV6b25lIiwicGF0dGVybnMiLCJkYXRlVGltZURlbGltaXRlciIsInRpbWVab25lRGVsaW1pdGVyIiwiZGF0ZVJlZ2V4IiwidGltZVJlZ2V4IiwidGltZXpvbmVSZWdleCIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwiYXJyYXkiLCJzcGxpdCIsInRlc3QiLCJzdWJzdHIiLCJ0b2tlbiIsImV4ZWMiLCJyZXBsYWNlIiwicmVnZXgiLCJSZWdFeHAiLCJjYXB0dXJlcyIsIm1hdGNoIiwicGFyc2VJbnQiLCJjZW50dXJ5Iiwic2xpY2UiLCJpc1dlZWtEYXRlIiwiZGF5T2ZZZWFyIiwicGFyc2VEYXRlVW5pdCIsIm1vbnRoIiwiZGF5Iiwid2VlayIsImRheU9mV2VlayIsIl95ZWFyIiwidmFsaWRhdGVXZWVrRGF0ZSIsImlzb1dlZWtZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJkaWZmIiwiZ2V0VVRDRGF5Iiwic2V0VVRDRGF0ZSIsImRheU9mSVNPV2Vla1llYXIiLCJkYXlzSW5Nb250aHMiLCJpc0xlYXBZZWFySW5kZXgiLCJ2YWxpZGF0ZURhdGUiLCJ2YWxpZGF0ZURheU9mWWVhckRhdGUiLCJtYXgiLCJ2YWx1ZSIsImhvdXJzIiwicGFyc2VUaW1lVW5pdCIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwidmFsaWRhdGVUaW1lIiwicGFyc2VGbG9hdCIsInRpbWV6b25lU3RyaW5nIiwic2lnbiIsIl9ob3VycyIsInZhbGlkYXRlVGltZXpvbmUiLCJ0b0RhdGUiLCJhcmdTdHIiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIiwic3RhY2siLCJjb21wYXJlQXNjIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJhZGREYXlzIiwiZGlydHlBbW91bnQiLCJhbW91bnQiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImFkZE1vbnRocyIsImRheU9mTW9udGgiLCJlbmRPZkRlc2lyZWRNb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJkYXlzSW5Nb250aCIsImdldEZ1bGxZZWFyIiwicmVjb25zdHJ1Y3RlZFByb2plY3RMaXN0IiwicmVjb25zdHJ1Y3RlZCIsImdldERhdGEiLCJmb3JFYWNoIiwicHJvamVjdCIsIm5ld1Byb2plY3QiLCJhZGRBbGxQcm9qZWN0c1RvVWkiLCJvYmoiLCJwYXJlbnRMaSIsImNyZWF0ZUVsZW1lbnQiLCJkYXRhc2V0IiwibmFtZUNvbnRhaW5lciIsImNvbG9yQ2lyY2xlIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJhcHBlbmRDaGlsZCIsImFkZFByb2plY3RUb1VpIiwiYWRkVGFza3RvVWkiLCJwcm9qZWN0SW5kZXgiLCJ0YXNrSW5kZXgiLCJjb2xvckJsb2NrIiwiY2xhc3NMaXN0IiwiYWRkIiwidGFza0NvbnRhaW5lciIsInRhc2tBbmRDaGVja2JveERpdiIsImNoZWNrYm94RGl2IiwiY2hlY2tib3hJbWciLCJzcmMiLCJ0YXNrTmFtZURpdiIsImRhdGVBbmRFZGl0RGl2IiwiZGF0ZURpdiIsImVkaXRCdXR0b24iLCJlZGl0SW1nIiwidHJhc2hCdXR0b24iLCJ0cmFzaEltZyIsImFwcGVuZCIsInByZXBlbmQiLCJhZGRBbGxUYXNrc1RvVWkiLCJwcm9qZWN0QXJyYXkiLCJ0YXNrQ29sb3IiLCJhZGRUYXNrc0Zyb21Qcm9qZWN0IiwicHJvamVjdE5hbWUiLCJhZGRUb2RheXNUYXNrcyIsInRvZGF5IiwidG9JU09TdHJpbmciLCJhZGRXZWVrc1Rhc2tzIiwid2Vla0Zyb21Ob3ciLCJkdXJhdGlvbiIsInllYXJzIiwibW9udGhzIiwid2Vla3MiLCJkYXlzIiwiZGF0ZVdpdGhNb250aHMiLCJkYXRlV2l0aERheXMiLCJtc1RvQWRkIiwiY2xlYXJUYXNrcyIsInRhc2tzUGFyZW50IiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwicmVmcmVzaFByb2plY3RzIiwicHJvamVjdHNQYXJlbnQiLCJjbGVhclByb2plY3RzIiwicHJvamVjdExpc3RlbmVycyIsInJlZnJlc2hDdXJyZW50VGFza3MiLCJjdXJyZW50VGFza0xpc3ROYW1lIiwidGFza0J1dHRvbkxpc3RlbmVycyIsIkhlYWRlckVkaXREZWxldGUiLCJwYXJlbnRDb250IiwiZGVsZXRlQnV0dG9uIiwidGFza0xpc3ROYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsInByb2plY3RDb250IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJTdHJpbmciLCJ0YXJnZXQiLCJjbG9zZXN0IiwiY2xlYXIiLCJwcm9qZWN0RWRpdE1vZGFsIiwic3BsaWNlIiwic2F2ZURhdGEiLCJwcm9qZWN0RGVsZXRlQnV0dG9uIiwiZGVsZXRlQnV0dG9uTGlzdGVuZXJzIiwiYnV0dG9uIiwicmVjb25zdHJ1Y3RlZFByb2plY3RBcnJheSIsInBhcmVudEVsZW1lbnQiLCJjaGVja2JveCIsImNvbnRhaW5zIiwidG9nZ2xlIiwidGFza0VkaXRCdXR0b25MaXN0ZW5lcnMiLCJjbG9zZVByb2plY3RNb2RhbCIsImRpc3BsYXkiLCJvcGVuUHJvamVjdE1vZGFsIiwicmVzZXQiLCJjbG9zZVRhc2tNb2RhbCIsIm9wZW5UYXNrTW9kYWwiLCJjbGVhckZvcm1PcHRpb25zIiwicHJvamVjdHNUb0Zvcm1PcHRpb25zIiwicHJvamVjdEZvcm1TdWJtaXQiLCJwcm9qZWN0RXJyb3IiLCJub1Byb2plY3ROYW1lRXJyb3JzIiwidmFsaWRhdGVQcm9qZWN0Rm9ybSIsInByb2plY3RFZGl0U3VibWl0IiwibW9kYWxUb1Byb2plY3QiLCJwcm9qZWN0VG9BcnJheSIsInRhc2tUb0FycmF5IiwibmV3VGFzayIsInRpdGxlIiwiZHVlRGF0ZSIsIm1vZGFsVG9UYXNrIiwidGFza0Zvcm1TdWJtaXQiLCJ0YXNrTmFtZSIsInRhc2tFcnJvciIsIm5vUHJvamVjdEVycm9ycyIsIm5vVGFza0Vycm9ycyIsInZhbGlkYXRlVGFza0Zvcm0iLCJ0YXNrRWRpdFN1Ym1pdCIsInBhcmVudCIsInNlbGVjdFBhcmVudCIsIm5ld09wdGlvbiIsInRleHQiLCJtb2RhbEhlYWRlciIsInByb2plY3RTZWxlY3QiLCJjdXJyZW50VGFzayIsImR1bW15Q2hlY2siLCJwcmV2ZW50RGVmYXVsdCIsIndpbmRvdyIsImV2ZW50IiwiYWxsVG9kYXlXZWVrTGlzdGVuZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==