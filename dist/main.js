(()=>{"use strict";class e{constructor(e,t){this.name=e,this.color=t,this.tasks=[]}newName(e){this.name=e}newColor(e){this.color=e}addTask(e){this.tasks.push(e)}overWriteTasks(e){this.tasks=e}}class t{constructor(e,t,a=!1){this.name=e,this.date=t,this.done=a}newName(e){this.name=e}newDate(e){this.date=e}toggleDone(){this.done?this.done=!1:this.done=!0}}const a=()=>{document.querySelector("#task-error").textContent="",document.querySelector("#project-error").textContent="",document.querySelector("#project-name-error").textContent=""};class n{static saveData(e){localStorage.setItem("projectList",JSON.stringify(e))}static getData(){return JSON.parse(localStorage.getItem("projectList"))}}Math.pow(10,8);var r=36e5;function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function l(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function c(e,t){o(1,arguments);var a=t||{},n=null==a.additionalDigits?2:l(a.additionalDigits);if(2!==n&&1!==n&&0!==n)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var r,c=m(e);if(c.date){var d=p(c.date,n);r=h(d.restDateString,d.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);var s,u=r.getTime(),i=0;if(c.time&&(i=y(c.time),isNaN(i)))return new Date(NaN);if(!c.timezone){var f=new Date(u+i),S=new Date(0);return S.setFullYear(f.getUTCFullYear(),f.getUTCMonth(),f.getUTCDate()),S.setHours(f.getUTCHours(),f.getUTCMinutes(),f.getUTCSeconds(),f.getUTCMilliseconds()),S}return s=k(c.timezone),isNaN(s)?new Date(NaN):new Date(u+i+s)}var d={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,i=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(e){var t,a={},n=e.split(d.dateTimeDelimiter);if(n.length>2)return a;if(/:/.test(n[0])?t=n[0]:(a.date=n[0],t=n[1],d.timeZoneDelimiter.test(a.date)&&(a.date=e.split(d.timeZoneDelimiter)[0],t=e.substr(a.date.length,e.length))),t){var r=d.timezone.exec(t);r?(a.time=t.replace(r[1],""),a.timezone=r[1]):a.time=t}return a}function p(e,t){var a=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),n=e.match(a);if(!n)return{year:NaN,restDateString:""};var r=n[1]?parseInt(n[1]):null,o=n[2]?parseInt(n[2]):null;return{year:null===o?r:100*o,restDateString:e.slice((n[1]||n[2]).length)}}function h(e,t){if(null===t)return new Date(NaN);var a=e.match(s);if(!a)return new Date(NaN);var n=!!a[4],r=f(a[1]),o=f(a[2])-1,l=f(a[3]),c=f(a[4]),d=f(a[5])-1;if(n)return function(e,t,a){return t>=1&&t<=53&&a>=0&&a<=6}(0,c,d)?function(e,t,a){var n=new Date(0);n.setUTCFullYear(e,0,4);var r=7*(t-1)+a+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+r),n}(t,c,d):new Date(NaN);var u=new Date(0);return function(e,t,a){return t>=0&&t<=11&&a>=1&&a<=(g[t]||(v(e)?29:28))}(t,o,l)&&function(e,t){return t>=1&&t<=(v(e)?366:365)}(t,r)?(u.setUTCFullYear(t,o,Math.max(r,l)),u):new Date(NaN)}function f(e){return e?parseInt(e):1}function y(e){var t=e.match(u);if(!t)return NaN;var a=S(t[1]),n=S(t[2]),o=S(t[3]);return function(e,t,a){return 24===e?0===t&&0===a:a>=0&&a<60&&t>=0&&t<60&&e>=0&&e<25}(a,n,o)?a*r+6e4*n+1e3*o:NaN}function S(e){return e&&parseFloat(e.replace(",","."))||0}function k(e){if("Z"===e)return 0;var t=e.match(i);if(!t)return 0;var a="+"===t[1]?-1:1,n=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?a*(n*r+6e4*o):NaN}var g=[31,null,31,30,31,30,31,31,30,31,30,31];function v(e){return e%400==0||e%4==0&&e%100!=0}function D(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function E(e,t){o(2,arguments);var a=D(e),n=D(t),r=a.getTime()-n.getTime();return r<0?-1:r>0?1:r}function C(e,t){o(2,arguments);var a=D(e),n=l(t);return isNaN(n)?new Date(NaN):n?(a.setDate(a.getDate()+n),a):a}function q(e,t){o(2,arguments);var a=D(e),n=l(t);if(isNaN(n))return new Date(NaN);if(!n)return a;var r=a.getDate(),c=new Date(a.getTime());c.setMonth(a.getMonth()+n+1,0);var d=c.getDate();return r>=d?c:(a.setFullYear(c.getFullYear(),c.getMonth(),r),a)}const x=()=>{let a=[];return n.getData().forEach((n=>{let r=new e(n.name,n.color);n.tasks.forEach((e=>{r.addTask(new t(e.name,e.date,e.done))})),a.push(r)})),a},j=()=>{null!==n.getData()&&n.getData().forEach((e=>{(e=>{let t=document.createElement("li");t.dataset.project=e.name;let a=document.createElement("span"),n=document.createElement("span"),r=document.createElement("div");n.textContent="(0)",a.textContent=e.name,r.style.backgroundColor=e.color,t.appendChild(r),t.appendChild(a),t.appendChild(n),document.querySelector(".project-container ul").appendChild(t)})(e)}))},N=(e,t,a,n)=>{let r=document.createElement("li");r.dataset.projectIndex=a,r.dataset.taskIndex=n;let o=document.createElement("div");o.classList.add("color-block"),o.style.backgroundColor=t;let l=document.createElement("div");l.classList.add("task-container");let c=document.createElement("div");c.classList.add("task-and-checkbox");let d=document.createElement("div");if(d.classList.add("checkbox"),!0===e.done){d.classList.add("checked");let e=document.createElement("img");e.src="./img/check.png",d.appendChild(e)}let s=document.createElement("div");s.classList.add("task-name"),s.textContent=e.name;let u=document.createElement("div");u.classList.add("date-and-edit");let i=document.createElement("date");i.classList.add("date"),""===e.date?i.textContent="No due date":i.textContent=e.date;let m=document.createElement("span");m.classList.add("task-edit-button");let p=document.createElement("img");p.src="./img/credit-card-edit.png";let h=document.createElement("span"),f=document.createElement("img");f.src="./img/delete.png",r.appendChild(o),r.appendChild(l),l.appendChild(c),c.appendChild(d),c.appendChild(s),l.appendChild(u),u.appendChild(i),m.appendChild(p),h.appendChild(f),u.appendChild(m),u.appendChild(h),e.done?document.querySelector(".bot-content-block ul").append(r):document.querySelector(".bot-content-block ul").prepend(r)},w=()=>{if(null!==n.getData()){let e=n.getData(),t=0;e.forEach((e=>{let a=e.color,n=0;e.tasks.forEach((e=>{N(e,a,t,n),n++})),t++}))}},b=e=>{if(null!==n.getData()){let t=n.getData(),a=0;t.forEach((t=>{let n=0;if(t.name===e){let e=t.color;t.tasks.forEach((t=>{N(t,e,a,n),n++}))}a++}))}},T=()=>{let e=c((new Date).toISOString().split("T")[0]),t=n.getData(),a=0;t.forEach((t=>{let n=t.color,r=0;t.tasks.forEach((t=>{0===E(c(t.date),e)&&N(t,n,a,r),r++})),a++}))},I=()=>{let e=c((new Date).toISOString().split("T")[0]),t=function(e,t){if(o(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var a=t.years?l(t.years):0,n=t.months?l(t.months):0,r=t.weeks?l(t.weeks):0,c=t.days?l(t.days):0,d=t.hours?l(t.hours):0,s=t.minutes?l(t.minutes):0,u=t.seconds?l(t.seconds):0,i=D(e),m=n||a?q(i,n+12*a):i,p=c||r?C(m,c+7*r):m,h=1e3*(u+60*(s+60*d));return new Date(p.getTime()+h)}(e,{days:7}),a=n.getData(),r=0;a.forEach((a=>{let n=a.color,o=0;a.tasks.forEach((a=>{-1===E(c(a.date),t)&&-1!==E(c(a.date),e)&&N(a,n,r,o),o++})),r++}))},L=()=>{let e=document.querySelector(".bot-content-block ul");for(;e.firstChild;)e.removeChild(e.lastChild)},A=()=>{(()=>{let e=document.querySelector(".project-container ul");for(;e.firstChild;)e.removeChild(e.lastChild)})(),j(),M()},O=()=>{let e=document.querySelector(".list-name").textContent;switch(e){case"ALL":L(),w();break;case"TODAY":L(),T();break;case"WEEK":L(),I();break;default:L(),b(e)}Y()};class U{static add(){let e=document.querySelector(".list-edit-delete"),t=document.createElement("span");t.textContent="Edit";let a=document.createElement("span");a.textContent="Delete",e.append(t),e.append(a)}static clear(){let e=document.querySelector(".list-edit-delete");for(;e.firstChild;)e.removeChild(e.lastChild)}}const M=()=>{let e=document.querySelector(".list-name");document.querySelectorAll(".project-container ul li").forEach((t=>{t.addEventListener("click",(t=>{L(),e.textContent=String(t.target.closest("li").dataset.project),b(t.target.closest("li").dataset.project),Y(),U.clear(),U.add(),document.querySelector(".list-edit-delete span:first-child").addEventListener("click",(()=>{W()})),document.querySelector(".list-edit-delete span:last-child").addEventListener("click",(()=>{(()=>{let e=document.querySelector(".top-content-block h2").textContent,t=n.getData(),a=0;t.forEach((n=>{n.name===e&&t.splice(a,1),a++})),n.saveData(t)})(),L(),document.querySelector(".list-name").textContent="ALL",w(),Y(),U.clear(),A()}))}))}))},P=()=>{document.querySelectorAll(".date-and-edit span:last-child").forEach((e=>{e.addEventListener("click",(()=>{let t=x(),a=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),r=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t[a].tasks.splice(r,1),n.saveData(t),O()}))}))},Y=()=>{document.querySelectorAll(".checkbox").forEach((e=>{e.addEventListener("click",(()=>{if(e.classList.contains("checked"))e.removeChild(e.lastChild);else{let t=document.createElement("img");t.src="./img/check.png",e.appendChild(t)}let t=x(),a=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),r=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t[a].tasks[r].toggleDone(),n.saveData(t),e.classList.toggle("checked")}))})),P(),H()},F=()=>{document.querySelector("#project-modal").style.display="none",document.querySelector("#project-modal .modal-top span:first-child").textContent="ADD PROJECT",document.querySelector("#project-form-submit").textContent="Add Project"},Z=()=>{document.querySelector("#project-form").reset(),a(),document.querySelector("#project-modal").style.display="block"},z=()=>{document.querySelector("#task-modal").style.display="none",delete document.querySelector("#task-modal .modal-top span:first-child").dataset.taskIndex,delete document.querySelector("#task-modal .modal-top span:first-child").dataset.projectIndex,document.querySelector("#task-modal .modal-top span:first-child").textContent="ADD TASK",document.querySelector("#task-form-submit").textContent="Add Task"},J=()=>{document.querySelector("#task-form").reset(),a(),R(),$(),document.querySelector("#task-modal").style.display="block"},K=()=>{let e=(()=>{let e=document.querySelector("#task").value,a=document.querySelector("#dueDate").value;return new t(e,a)})(),a=document.querySelector("#project").value,r=n.getData();r.forEach((t=>{t.name===a&&t.tasks.push(e)})),n.saveData(r)},R=()=>{let e=document.querySelector("#project");for(;e.firstChild;)e.removeChild(e.lastChild)},$=()=>{let e=document.querySelector("#project");if(null!==n.getData()){let t=n.getData();for(const a of t){let t=document.createElement("option");t.value=a.name,t.text=a.name,e.appendChild(t)}}},W=()=>{let e=document.querySelector(".top-content-block h2").textContent,t=n.getData(),a=0;t.forEach((t=>{if(t.name===e){Z();let n=document.querySelector("#project-modal .modal-top span:first-child");n.textContent="EDIT PROJECT",document.querySelector("#project-form-submit").textContent="Edit Project";let r=document.querySelector("#name"),o=document.querySelector("#color");r.value=e,o.value=t.color,n.dataset.projectIndex=a}a++}))},H=()=>{document.querySelectorAll(".task-edit-button").forEach((e=>{e.addEventListener("click",(()=>{J();let t=document.querySelector("#task-modal .modal-top span:first-child");t.textContent="EDIT TASK",document.querySelector("#task-form-submit").textContent="Edit Task";let a=n.getData(),r=parseInt(e.parentElement.parentElement.parentElement.dataset.projectIndex),o=parseInt(e.parentElement.parentElement.parentElement.dataset.taskIndex);t.dataset.projectIndex=r,t.dataset.taskIndex=o;let l=document.querySelector("#task"),c=document.querySelector("#dueDate"),d=document.querySelector("#project"),s=a[r].tasks[o];l.value=s.name,d.value=a[r].name,""!==s.date&&(c.value=s.date)}))}))};document.querySelector("#task-modal-close").addEventListener("click",(()=>{z()})),document.querySelector(".add-task").addEventListener("click",(()=>{J()})),document.querySelector("#project-modal-close").addEventListener("click",(()=>{F()})),document.querySelector(".add-project").addEventListener("click",(()=>{Z()})),window.addEventListener("click",(()=>{event.target==document.querySelector("#task-modal")?z():event.target==document.querySelector("#project-modal")&&F()})),document.querySelector("#project-form-submit").addEventListener("click",(t=>{t.preventDefault(),(()=>{const e=document.querySelector("#name").value;let t=document.querySelector("#project-name-error"),a=!0;return""===e?(t.textContent="Please enter a name for the project.",a=!1):(t.textContent="",a=!0),!!a})()&&("EDIT PROJECT"===document.querySelector("#project-modal .modal-top span:first-child").textContent?((()=>{let e=x(),t=document.querySelector("#name"),a=document.querySelector("#color"),r=parseInt(document.querySelector("#project-modal .modal-top span:first-child").dataset.projectIndex);e[r].newName(t.value),e[r].newColor(a.value),document.querySelector(".list-name").textContent=t.value,n.saveData(e),delete document.querySelector("#project-modal .modal-top span:first-child").dataset.projectIndex})(),A(),O(),F()):((()=>{let t=(()=>{let t=document.querySelector("#name").value,a=document.querySelector("#color").value;return new e(t,a)})();if(null===n.getData()){let e=[];e.push(t),n.saveData(e)}else{let e=n.getData();e.push(t),n.saveData(e)}})(),A(),F()))})),document.querySelector("#task-form-submit").addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector("#task").value,t=document.querySelector("#project").value;let a=document.querySelector("#task-error"),n=document.querySelector("#project-error"),r=!0,o=!0;return""===e?(a.textContent="Please enter a task name.",o=!1):(a.textContent="",o=!0),""===t&&null===document.querySelector("#project").firstChild?(n.textContent="Please create a project before adding a task.",r=!1):(n.textContent="",r=!0),!(!r||!o)})()&&("EDIT TASK"===document.querySelector("#task-modal .modal-top span:first-child").textContent?((()=>{let e=x(),t=document.querySelector("#task"),a=document.querySelector("#dueDate"),r=document.querySelector("#project"),o=parseInt(document.querySelector("#task-modal .modal-top span:first-child").dataset.projectIndex),l=parseInt(document.querySelector("#task-modal .modal-top span:first-child").dataset.taskIndex);r.value===e[o].name?(e[o].tasks[l].newName(t.value),e[o].tasks[l].newDate(a.value),n.saveData(e)):(e[o].tasks.splice(l,1),n.saveData(e),K())})(),z(),O()):(K(),z(),O()))})),document.querySelector("#task-form-cancel").addEventListener("click",(e=>{e.preventDefault(),z()})),document.querySelector("#project-form-cancel").addEventListener("click",(e=>{e.preventDefault(),F()})),w(),j(),M(),(()=>{let e=document.querySelector(".list-name");document.querySelector("#all-tasks").addEventListener("click",(()=>{L(),e.textContent="ALL",w(),Y(),U.clear()})),document.querySelector("#today-tasks").addEventListener("click",(()=>{L(),e.textContent="TODAY",T(),Y(),U.clear()})),document.querySelector("#week-tasks").addEventListener("click",(()=>{L(),e.textContent="WEEK",I(),Y(),U.clear()}))})(),Y(),P()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,